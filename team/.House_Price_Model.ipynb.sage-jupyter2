{"backend_state":"running","connection_file":"/projects/a97d6307-9b0d-408a-ae28-2611511d3a18/.local/share/jupyter/runtime/kernel-5b80e470-8ad1-44b0-91f0-3cbdd55d1723.json","kernel":"ds_env","kernel_error":"","kernel_state":"busy","kernel_usage":{"cpu":0,"memory":0},"trust":true,"type":"settings"}
{"cell_type":"markdown","id":"1f9b33","input":"#### Neural Network\n\n","pos":32,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"44cee6","input":"### Data Loading\n\n","pos":2,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"596d4e","input":"### Data Cleaning\n\n","pos":11,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"79003a","input":"### Data Visualization \\(at least 5\\)\n\n","pos":4,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"93930c","input":"#### Linear Regression with Polynomial features\n\n","pos":17,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"d54045","input":"#### Decision Tree\n\n","pos":23,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"f03d47","input":"### Data Modeling\n\n","pos":14,"state":"done","type":"cell"}
{"end":1655408263738,"exec_count":1,"id":"6026e9","input":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport statistics\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom plotly.offline import iplot\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)","kernel":"ds_env","no_halt":true,"pos":0,"start":1655408261027,"state":"done","type":"cell"}
{"end":1655408263946,"exec_count":2,"id":"42b34f","input":"housePrice = pd.read_csv(\"Data/kc_house_data.csv\")\nzipcodedf = pd.read_csv(\"Data/usa_zipcode_of_wa.csv\")\n\nzipcodedf = zipcodedf.dropna(subset=['City'])\nzipcodedf = zipcodedf.rename(columns = {\"zip\":\"zipcode\"})\n\nzipcodedf['zipcode'] = zipcodedf['zipcode'].astype(int)\nmerged_zip = pd.merge(zipcodedf, housePrice, on =\"zipcode\")\nmerged_zip.head()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>zipcode</th>\n      <th>Zipcode name</th>\n      <th>City</th>\n      <th>State</th>\n      <th>County Name</th>\n      <th>id</th>\n      <th>date</th>\n      <th>price</th>\n      <th>bedrooms</th>\n      <th>bathrooms</th>\n      <th>...</th>\n      <th>condition</th>\n      <th>grade</th>\n      <th>sqft_above</th>\n      <th>sqft_basement</th>\n      <th>yr_built</th>\n      <th>yr_renovated</th>\n      <th>lat</th>\n      <th>long</th>\n      <th>sqft_living15</th>\n      <th>sqft_lot15</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>98001</td>\n      <td>AUBURN, WA</td>\n      <td>AUBURN</td>\n      <td>WA</td>\n      <td>KING</td>\n      <td>7895500070</td>\n      <td>20150213T000000</td>\n      <td>240000.0</td>\n      <td>4</td>\n      <td>1.0</td>\n      <td>...</td>\n      <td>2</td>\n      <td>7</td>\n      <td>890</td>\n      <td>330</td>\n      <td>1969</td>\n      <td>0</td>\n      <td>47.3341</td>\n      <td>-122.282</td>\n      <td>1290</td>\n      <td>7800</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>98001</td>\n      <td>AUBURN, WA</td>\n      <td>AUBURN</td>\n      <td>WA</td>\n      <td>KING</td>\n      <td>3717000160</td>\n      <td>20141009T000000</td>\n      <td>287000.0</td>\n      <td>4</td>\n      <td>2.5</td>\n      <td>...</td>\n      <td>3</td>\n      <td>7</td>\n      <td>2240</td>\n      <td>0</td>\n      <td>2005</td>\n      <td>0</td>\n      <td>47.3378</td>\n      <td>-122.257</td>\n      <td>2221</td>\n      <td>4557</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>98001</td>\n      <td>AUBURN, WA</td>\n      <td>AUBURN</td>\n      <td>WA</td>\n      <td>KING</td>\n      <td>8961960160</td>\n      <td>20141028T000000</td>\n      <td>480000.0</td>\n      <td>4</td>\n      <td>2.5</td>\n      <td>...</td>\n      <td>3</td>\n      <td>9</td>\n      <td>2520</td>\n      <td>710</td>\n      <td>2001</td>\n      <td>0</td>\n      <td>47.3183</td>\n      <td>-122.253</td>\n      <td>2640</td>\n      <td>8517</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>98001</td>\n      <td>AUBURN, WA</td>\n      <td>AUBURN</td>\n      <td>WA</td>\n      <td>KING</td>\n      <td>4014400292</td>\n      <td>20150114T000000</td>\n      <td>465000.0</td>\n      <td>3</td>\n      <td>2.5</td>\n      <td>...</td>\n      <td>3</td>\n      <td>9</td>\n      <td>2714</td>\n      <td>0</td>\n      <td>2005</td>\n      <td>0</td>\n      <td>47.3185</td>\n      <td>-122.275</td>\n      <td>2590</td>\n      <td>18386</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>98001</td>\n      <td>AUBURN, WA</td>\n      <td>AUBURN</td>\n      <td>WA</td>\n      <td>KING</td>\n      <td>1115450240</td>\n      <td>20141022T000000</td>\n      <td>360000.0</td>\n      <td>4</td>\n      <td>2.5</td>\n      <td>...</td>\n      <td>3</td>\n      <td>9</td>\n      <td>2160</td>\n      <td>0</td>\n      <td>1992</td>\n      <td>0</td>\n      <td>47.3341</td>\n      <td>-122.255</td>\n      <td>2280</td>\n      <td>9937</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 25 columns</p>\n</div>","text/plain":"   zipcode Zipcode name    City State County Name          id  \\\n0    98001   AUBURN, WA  AUBURN    WA        KING  7895500070   \n1    98001   AUBURN, WA  AUBURN    WA        KING  3717000160   \n2    98001   AUBURN, WA  AUBURN    WA        KING  8961960160   \n3    98001   AUBURN, WA  AUBURN    WA        KING  4014400292   \n4    98001   AUBURN, WA  AUBURN    WA        KING  1115450240   \n\n              date     price  bedrooms  bathrooms  ...  condition  grade  \\\n0  20150213T000000  240000.0         4        1.0  ...          2      7   \n1  20141009T000000  287000.0         4        2.5  ...          3      7   \n2  20141028T000000  480000.0         4        2.5  ...          3      9   \n3  20150114T000000  465000.0         3        2.5  ...          3      9   \n4  20141022T000000  360000.0         4        2.5  ...          3      9   \n\n   sqft_above  sqft_basement  yr_built  yr_renovated      lat     long  \\\n0         890            330      1969             0  47.3341 -122.282   \n1        2240              0      2005             0  47.3378 -122.257   \n2        2520            710      2001             0  47.3183 -122.253   \n3        2714              0      2005             0  47.3185 -122.275   \n4        2160              0      1992             0  47.3341 -122.255   \n\n   sqft_living15  sqft_lot15  \n0           1290        7800  \n1           2221        4557  \n2           2640        8517  \n3           2590       18386  \n4           2280        9937  \n\n[5 rows x 25 columns]"},"exec_count":2}},"pos":3,"start":1655408263770,"state":"done","type":"cell"}
{"end":1655408264013,"exec_count":3,"id":"cd5d3c","input":"merged_zip.info()","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nInt64Index: 21613 entries, 0 to 21612\nData columns (total 25 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   zipcode        21613 non-null  int64  \n 1   Zipcode name   21613 non-null  object \n 2   City           21613 non-null  object \n 3   State          21613 non-null  object \n 4   County Name    21613 non-null  object \n 5   id             21613 non-null  int64  \n 6   date           21613 non-null  object \n 7   price          21613 non-null  float64\n 8   bedrooms       21613 non-null  int64  \n 9   bathrooms      21613 non-null  float64\n 10  sqft_living    21613 non-null  int64  \n 11  sqft_lot       21613 non-null  int64  \n 12  floors         21613 non-null  float64\n 13  waterfront     21613 non-null  int64  \n 14  view           21613 non-null  int64  \n 15  condition      21613 non-null  int64  \n 16  grade          21613 non-null  int64  \n 17  sqft_above     21613 non-null  int64  \n 18  sqft_basement  21613 non-null  int64  \n 19  yr_built       21613 non-null  int64  \n 20  yr_renovated   21613 non-null  int64  \n 21  lat            21613 non-null  float64\n 22  long           21613 non-null  float64\n 23  sqft_living15  21613 non-null  int64  \n 24  sqft_lot15     21613 non-null  int64  \ndtypes: float64(5), int64(15), object(5)\nmemory usage: 4.3+ MB\n"}},"pos":3.5,"start":1655408263950,"state":"done","type":"cell"}
{"end":1655408264813,"exec_count":4,"id":"262af1","input":"fig1 = px.imshow(merged_zip.corr())\nfig1.update_layout(\n    autosize=False,\n    width=800,\n    height=800)\nfig1.show()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"iframe":"8635c2b1bc1fd965d09be064e13bd7c4066a9a1c"}}},"pos":5,"start":1655408264027,"state":"done","type":"cell"}
{"end":1655408265490,"exec_count":5,"id":"213268","input":"fig1 = px.scatter(merged_zip, x=\"price\", y=\"sqft_living\",facet_col=\"view\", color = \"condition\")\nfig1.update_layout(\n    autosize=False,\n    width=1000,\n    height=600)\nfig1.show()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"iframe":"745a4d775d2bde053c8bb4e89f54391ba9110299"}}},"pos":6,"start":1655408264818,"state":"done","type":"cell"}
{"end":1655408265862,"exec_count":6,"id":"11ffb4","input":"fig1 = px.scatter(merged_zip, x=\"price\", y=\"sqft_above\", color = \"City\")\nfig1.update_layout(\n    autosize=False,\n    width=1000,\n    height=600)\nfig1.show()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"iframe":"9eaa8ac91d644ae9b789d471848f628a1fcfa392"}}},"pos":7,"start":1655408265516,"state":"done","type":"cell"}
{"end":1655408266297,"exec_count":7,"id":"7e3032","input":"boxplot = px.box(merged_zip, y=\"price\", x=\"City\")\nboxplot.update_layout(\n    autosize=False,\n    width=1500,\n    height=600)\nboxplot.show()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"iframe":"14864b8245b5d0f92d98d60465f38b26211f5648"}}},"pos":8,"start":1655408265884,"state":"done","type":"cell"}
{"end":1655408266526,"exec_count":8,"id":"6eff1d","input":"boxplot = px.box(merged_zip, x=\"bathrooms\", y=\"price\")\nboxplot.show()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"iframe":"4b37eeb645ccad36ba9afc056d1ea8290e366db4"}}},"pos":9,"start":1655408266318,"state":"done","type":"cell"}
{"end":1655408266963,"exec_count":9,"id":"7cc540","input":"fig = px.scatter(merged_zip, x=\"sqft_living\", y=\"price\",\n                 size=\"condition\", color=\"City\", log_x=True, size_max=30)\nfig.show()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"iframe":"0d94e9c1fe656d46edde311677ac7772c496eb88"}}},"pos":9.5,"start":1655408266546,"state":"done","type":"cell"}
{"end":1655408267080,"exec_count":10,"id":"52826a","input":"fig = px.pie(merged_zip, values='price', names='bedrooms', color_discrete_sequence=px.colors.sequential.RdBu)\nfig.show()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"iframe":"6fdc10ad743dca040823f9037eac0ffafad4d4fd"}}},"pos":10.5,"start":1655408266972,"state":"done","type":"cell"}
{"end":1655408267179,"exec_count":11,"id":"b2d936","input":"# Drop not useful columns\nmerged_zip = merged_zip.drop(['zipcode', 'Zipcode name', 'id', 'State', 'lat', 'long', 'County Name'], axis = 1)\n# convert date into datetime and split year, month, and day from it\nmerged_zip['date'] = pd.to_datetime(merged_zip['date'])\nmerged_zip['year'] = merged_zip['date'].dt.year\nmerged_zip['month'] = merged_zip['date'].dt.month\n\n# calculate house age starting from the year that the house was sold\nmerged_zip = merged_zip.drop([\"date\"],axis = 1)\nmerged_zip['yr_age'] = abs(merged_zip['year'] - merged_zip[\"yr_built\"])\n\n# use 0 and 1 to represent whether the house is renewed or not\nmerged_zip['renovation'] = np.where(merged_zip['yr_renovated']==0,0,1)\nmerged_zip.drop(['yr_renovated'], inplace=True, axis=1)\nprint(merged_zip['renovation'].value_counts())\n\nmerged_zip = pd.concat([merged_zip,pd.get_dummies(merged_zip[\"City\"],prefix = \"city\")],axis = 1)  \nmerged_zip = merged_zip.drop([\"City\"], axis = 1)\nmerged_zip.head()","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"0    20699\n1      914\nName: renovation, dtype: int64\n"},"1":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>price</th>\n      <th>bedrooms</th>\n      <th>bathrooms</th>\n      <th>sqft_living</th>\n      <th>sqft_lot</th>\n      <th>floors</th>\n      <th>waterfront</th>\n      <th>view</th>\n      <th>condition</th>\n      <th>grade</th>\n      <th>...</th>\n      <th>city_MEDINA</th>\n      <th>city_MERCER ISLAND</th>\n      <th>city_NORTH BEND</th>\n      <th>city_REDMOND</th>\n      <th>city_RENTON</th>\n      <th>city_SAMMAMISH</th>\n      <th>city_SEATTLE</th>\n      <th>city_SNOQUALMIE</th>\n      <th>city_VASHON</th>\n      <th>city_WOODINVILLE</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>240000.0</td>\n      <td>4</td>\n      <td>1.0</td>\n      <td>1220</td>\n      <td>8075</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>7</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>287000.0</td>\n      <td>4</td>\n      <td>2.5</td>\n      <td>2240</td>\n      <td>4648</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>7</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>480000.0</td>\n      <td>4</td>\n      <td>2.5</td>\n      <td>3230</td>\n      <td>16171</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>3</td>\n      <td>9</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>465000.0</td>\n      <td>3</td>\n      <td>2.5</td>\n      <td>2714</td>\n      <td>17936</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>9</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>360000.0</td>\n      <td>4</td>\n      <td>2.5</td>\n      <td>2160</td>\n      <td>9528</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>9</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 43 columns</p>\n</div>","text/plain":"      price  bedrooms  bathrooms  sqft_living  sqft_lot  floors  waterfront  \\\n0  240000.0         4        1.0         1220      8075     1.0           0   \n1  287000.0         4        2.5         2240      4648     2.0           0   \n2  480000.0         4        2.5         3230     16171     2.0           0   \n3  465000.0         3        2.5         2714     17936     2.0           0   \n4  360000.0         4        2.5         2160      9528     2.0           0   \n\n   view  condition  grade  ...  city_MEDINA  city_MERCER ISLAND  \\\n0     0          2      7  ...            0                   0   \n1     0          3      7  ...            0                   0   \n2     3          3      9  ...            0                   0   \n3     0          3      9  ...            0                   0   \n4     0          3      9  ...            0                   0   \n\n   city_NORTH BEND  city_REDMOND  city_RENTON  city_SAMMAMISH  city_SEATTLE  \\\n0                0             0            0               0             0   \n1                0             0            0               0             0   \n2                0             0            0               0             0   \n3                0             0            0               0             0   \n4                0             0            0               0             0   \n\n   city_SNOQUALMIE  city_VASHON  city_WOODINVILLE  \n0                0            0                 0  \n1                0            0                 0  \n2                0            0                 0  \n3                0            0                 0  \n4                0            0                 0  \n\n[5 rows x 43 columns]"},"exec_count":11}},"pos":12,"start":1655408267108,"state":"done","type":"cell"}
{"end":1655408267205,"exec_count":12,"id":"5fa124","input":"# remove outliers\nmerged_zip = merged_zip[merged_zip['price'] < 2e6] ","kernel":"ds_env","no_halt":true,"pos":13,"start":1655408267186,"state":"done","type":"cell"}
{"end":1655408270339,"exec_count":13,"id":"323861","input":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.pipeline import make_pipeline\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error\nfrom sklearn.model_selection import GridSearchCV\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, BatchNormalization, Input\nfrom sklearn.preprocessing import MinMaxScaler","kernel":"ds_env","no_halt":true,"pos":15,"start":1655408267229,"state":"done","type":"cell"}
{"end":1655408270367,"exec_count":14,"id":"8d5c8c","input":"# get features as X and response as y\nX = merged_zip.drop([\"price\"], axis = 1)\ny = merged_zip[\"price\"]\n\n# Split the data\nx_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","kernel":"ds_env","no_halt":true,"pos":16,"start":1655408270356,"state":"done","type":"cell"}
{"end":1655408272999,"exec_count":15,"id":"01b38c","input":"# fit linear regression model by adding polynomial features\npoly_reg=PolynomialFeatures(degree=2)\nx_poly = poly_reg.fit_transform(x_train)\nx_test_poly = poly_reg.transform(x_test)\n\nlin_reg2=LinearRegression()\nlin_reg2.fit(x_poly,y_train)\n\ny_hat2 = lin_reg2.predict(x_test_poly)\nprint(lin_reg2.score(x_test_poly, y_test))","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"0.8070369067899824\n"}},"pos":18,"start":1655408270376,"state":"done","type":"cell"}
{"end":1655408273009,"exec_count":16,"id":"35ddca","input":"print(mean_absolute_error(y_hat2, y_test))","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"84804.08421056102\n"}},"pos":19,"start":1655408273005,"state":"done","type":"cell"}
{"id":"0b74b3","input":"regressor = DecisionTreeRegressor(random_state=0)\n\nparameters={\"splitter\":[\"best\",\"random\"],\n            \"max_depth\" : [None,1,3,5,7],\n           \"min_samples_leaf\":[1,2,3],\n           \"min_weight_fraction_leaf\":[0,0.2,0.3,0.4,0.5],\n           \"max_features\":[\"auto\",\"log2\",\"sqrt\",None],\n           \"max_leaf_nodes\":[None,10,30,40] }\n\ntuning_model = GridSearchCV(regressor,param_grid=parameters,scoring='neg_mean_squared_error',cv=3,verbose=1)\n\ntuning_model.fit(x_train, y_train)\nprint(tuning_model.best_params_)\nPrice = tuning_model.predict(x_test)\nprint(r2_score(y_test,Price))","kernel":"ds_env","no_halt":true,"pos":26,"state":"run","type":"cell"}
{"id":"1590da","input":"model = Sequential()\nmodel.add(Input(shape=(42,)))\nmodel.add(Dense(100,activation = \"relu\"))   # relu - limiting output between 0 and max\nmodel.add(Dense(250,activation = \"relu\"))\nmodel.add(Dense(200,activation = \"relu\"))\nmodel.add(Dense(100,activation = \"relu\"))\nmodel.add(Dense(1))\nmodel.compile(optimizer=\"adam\", loss= \"mae\")\nmodel.fit(X_train, y_train,validation_data=(X_test,y_test), epochs = 200,batch_size =128 )","kernel":"ds_env","no_halt":true,"pos":34,"scrolled":true,"state":"run","type":"cell"}
{"id":"33f849","input":"","pos":38,"type":"cell"}
{"id":"3f343f","input":"","kernel":"ds_env","pos":10,"type":"cell"}
{"id":"48b8b1","input":"plt.scatter(y_test,Price, color=\"b\")\nplt.plot(y_test,y_test, color=\"r\")","kernel":"ds_env","no_halt":true,"pos":28,"state":"run","type":"cell"}
{"id":"7b387a","input":"scaler = MinMaxScaler()\n# fit the scaler and scale training data \nX_train= scaler.fit_transform(x_train)\n# scale the test data \nX_test = scaler.transform(x_test)","kernel":"ds_env","no_halt":true,"pos":33,"state":"run","type":"cell"}
{"id":"858dde","input":"","pos":1,"type":"cell"}
{"id":"bb9660","input":"# predict using the test data \npredictions = model.predict(X_test)\n# evaluate the model\nprint(mean_absolute_error(y_test,predictions))\nprint(np.sqrt(mean_squared_error(y_test,predictions)))","kernel":"ds_env","no_halt":true,"pos":36,"state":"run","type":"cell"}
{"id":"c199ba","input":"regressor = DecisionTreeRegressor(random_state=0)\n#cross_val_score(regressor, X, y, cv=10)\n\nregressor.fit(x_train, y_train)","kernel":"ds_env","no_halt":true,"pos":25,"state":"run","type":"cell"}
{"id":"ca397d","input":"update_regressor = DecisionTreeRegressor(random_state=0, max_features = 'auto', min_samples_leaf = 3, min_weight_fraction_leaf = 0, splitter = 'random')\nupdate_regressor.fit(x_train, y_train)\n\nPrice = update_regressor.predict(x_test)","kernel":"ds_env","no_halt":true,"pos":27,"state":"run","type":"cell"}
{"id":"cb9d47","input":"# grid search for best degree in polynomial features\npipe = make_pipeline(PolynomialFeatures(),LinearRegression())\n\nparams = {'polynomialfeatures__degree':[1,2,3]}\n\n#pipe.fit(x_train, y_train)\n\nsearch = GridSearchCV(estimator = pipe, param_grid = params, scoring = \"neg_mean_squared_error\") # mean of y_test vs. y_predict\n\nsearch.fit(x_train, y_train)\n\nprint(search.best_params_)\nprint(search.best_score_)","kernel":"ds_env","no_halt":true,"pos":20,"start":1655408273016,"state":"busy","type":"cell"}
{"id":"d969d6","input":"MEA= np.mean(abs(y_test - Price))\nscore = r2_score(y_test,Price)\nprint(\"mean absolute error is:\", MEA)\nprint(\"score is:\", score)","kernel":"ds_env","no_halt":true,"pos":30,"state":"run","type":"cell"}
{"id":"e76a98","input":"losses = pd.DataFrame(model.history.history)\nlosses.plot()","kernel":"ds_env","no_halt":true,"pos":35,"scrolled":true,"state":"run","type":"cell"}
{"id":"f9161b","input":"r2_score(y_test,predictions)","kernel":"ds_env","no_halt":true,"pos":37,"state":"run","type":"cell"}
{"id":0,"time":1655405297213,"type":"user"}
{"last_load":1655384865808,"type":"file"}