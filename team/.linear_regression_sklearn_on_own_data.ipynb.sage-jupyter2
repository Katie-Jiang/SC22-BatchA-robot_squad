{"backend_state":"running","connection_file":"/projects/a97d6307-9b0d-408a-ae28-2611511d3a18/.local/share/jupyter/runtime/kernel-00550f91-73d5-4e9a-9856-33c3d7d83f14.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"colab":{"collapsed_sections":[],"name":"linear_regression_sklearn_on_own_data.ipynb","provenance":[]},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1655299487488,"exec_count":2,"id":"489bdf","input":"filename = 'https://raw.githubusercontent.com/mwaskom/seaborn-data/master/mpg.csv'\nmy_data = pd.read_csv(filename) #TODO: read in your file by replacing the filename variable with your file's path. You can also use this current code to work on an automobile dataset! ","kernel":"ds_env","metadata":{"id":"mBcweiAXW3bC"},"no_halt":true,"pos":5,"start":1655299487287,"state":"done","type":"cell"}
{"cell_type":"code","end":1655299487515,"exec_count":3,"id":"cf14c6","input":"my_data.head()","kernel":"ds_env","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"2n8n7O_8cUxX","outputId":"b1d56a4f-9c74-4cf0-b1eb-055ea2aab14e"},"no_halt":true,"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mpg</th>\n      <th>cylinders</th>\n      <th>displacement</th>\n      <th>horsepower</th>\n      <th>weight</th>\n      <th>acceleration</th>\n      <th>model_year</th>\n      <th>origin</th>\n      <th>name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>18.0</td>\n      <td>8</td>\n      <td>307.0</td>\n      <td>130.0</td>\n      <td>3504</td>\n      <td>12.0</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>chevrolet chevelle malibu</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>15.0</td>\n      <td>8</td>\n      <td>350.0</td>\n      <td>165.0</td>\n      <td>3693</td>\n      <td>11.5</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>buick skylark 320</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>18.0</td>\n      <td>8</td>\n      <td>318.0</td>\n      <td>150.0</td>\n      <td>3436</td>\n      <td>11.0</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>plymouth satellite</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>16.0</td>\n      <td>8</td>\n      <td>304.0</td>\n      <td>150.0</td>\n      <td>3433</td>\n      <td>12.0</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>amc rebel sst</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>17.0</td>\n      <td>8</td>\n      <td>302.0</td>\n      <td>140.0</td>\n      <td>3449</td>\n      <td>10.5</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>ford torino</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"    mpg  cylinders  displacement  horsepower  weight  acceleration  \\\n0  18.0          8         307.0       130.0    3504          12.0   \n1  15.0          8         350.0       165.0    3693          11.5   \n2  18.0          8         318.0       150.0    3436          11.0   \n3  16.0          8         304.0       150.0    3433          12.0   \n4  17.0          8         302.0       140.0    3449          10.5   \n\n   model_year origin                       name  \n0          70    usa  chevrolet chevelle malibu  \n1          70    usa          buick skylark 320  \n2          70    usa         plymouth satellite  \n3          70    usa              amc rebel sst  \n4          70    usa                ford torino  "},"exec_count":3}},"pos":6,"start":1655299487504,"state":"done","type":"cell"}
{"cell_type":"code","end":1655299487526,"exec_count":4,"id":"c323b9","input":"#cleaning the data -- dropping missing and duplicate values for sanity\nmy_data.dropna(inplace = True)\nmy_data.drop_duplicates(inplace = True)\nmy_data = my_data.reset_index(drop=True)\n\nlength = len(my_data.index) #save length of array of later","kernel":"ds_env","metadata":{"id":"BYHvay0xa-sK"},"no_halt":true,"pos":7,"start":1655299487518,"state":"done","type":"cell"}
{"cell_type":"code","end":1655299487839,"exec_count":5,"id":"604a4f","input":"sns.heatmap(my_data.corr())","kernel":"ds_env","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":344},"id":"H7FyJo_QutAX","outputId":"d1ad6159-df64-4882-e2ae-d78cfa814cc5"},"no_halt":true,"output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":5},"1":{"data":{"image/png":"1fbc5dbc585e3bc5fa7bcdf0f4c98be0c1eba666","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":9,"start":1655299487528,"state":"done","type":"cell"}
{"cell_type":"code","end":1655299487854,"exec_count":6,"id":"6bf1fb","input":"X = my_data[\"horsepower\"].to_numpy()\ny = my_data[\"mpg\"].to_numpy()","kernel":"ds_env","metadata":{"id":"WW77IzOwZaKp"},"no_halt":true,"pos":11,"start":1655299487851,"state":"done","type":"cell"}
{"cell_type":"code","end":1655299487868,"exec_count":7,"id":"2e4073","input":"# Checking for Missing Data\nif X.shape[0] != y.shape[0]:\n  print(\"It looks like you have missing data. You may want to preprocess your data more with pandas to delete any rows with missing, NaN, N/A, and null values.\")\n  \nidx = np.arange(length) #shuffle our dataset indices so we don't always split the same way!\nnp.random.shuffle(idx)\n\n#split our data with 80% for training (learning) and 20% for testing.\nsplit_threshold = int(length * 0.8)\n\ntrain_idx = idx[:split_threshold]\n# Uses the remaining indices for testing\ntest_idx = idx[split_threshold:]\n\n# Generates train and test sets and formats them for training.\nx_train, y_train = X[train_idx], y[train_idx]\nx_test, y_test = X[test_idx], y[test_idx]\nx_train= x_train.reshape(-1, 1)\ny_train= y_train.reshape(-1, 1)\nx_test = x_test.reshape(-1, 1)","kernel":"ds_env","metadata":{"id":"wKS4pvcEsLOF"},"no_halt":true,"pos":15,"start":1655299487862,"state":"done","type":"cell"}
{"cell_type":"code","end":1655299488277,"exec_count":8,"id":"11ea34","input":"#let's plot our split data to see how it looks!\nplt.figure(figsize=(10,5))\n\n# plot the train set \nplt.subplot(1,2,1)\nplt.scatter(x_train,y_train, c='orange')  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Train')\nplt.grid('on')\n\n# plot the test set \nplt.subplot(1,2,2)\nplt.scatter(x_test, y_test)  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\n\nplt.show()","kernel":"ds_env","metadata":{"id":"6IxwdW5osUDI"},"no_halt":true,"output":{"0":{"data":{"image/png":"99f4eb67dd315f7fa119dc2a88989420ca9492d6","text/plain":"<Figure size 720x360 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":16,"start":1655299487913,"state":"done","type":"cell"}
{"cell_type":"code","end":1655299488415,"exec_count":9,"id":"d32811","input":"from sklearn.linear_model import LinearRegression\n#Create the model object\nlinr = LinearRegression()\n#Fit (train) the model -- this is where the ML happens!\nlinr.fit(x_train, y_train)\nprint(linr.intercept_, linr.coef_[0])","kernel":"ds_env","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jkPf0bt4a-sV","outputId":"99433807-734f-4a07-fe0a-26b3ad2fb709"},"no_halt":true,"output":{"0":{"name":"stdout","text":"[39.37992066] [-0.15476881]\n"}},"pos":18,"start":1655299488299,"state":"done","type":"cell"}
{"cell_type":"code","end":1655299488424,"exec_count":10,"id":"7a2b4a","input":"# Predicting using SKLearn\ny_hat = linr.predict(x_test)","kernel":"ds_env","metadata":{"id":"o9ZDJB1qrJ7_"},"no_halt":true,"pos":20,"start":1655299488422,"state":"done","type":"cell"}
{"cell_type":"code","end":1655299488620,"exec_count":11,"id":"11af67","input":"#plotting results\nplt.figure(figsize=(10,5))\nplt.plot(x_test, y_hat, '--')\n\nplt.scatter(x_test,y_test, c='orange')  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\nplt.show()","kernel":"ds_env","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":359},"id":"RarVj0Kor54b","outputId":"c3649dc9-e5f0-4930-f4b1-100ad0987777"},"no_halt":true,"output":{"0":{"data":{"image/png":"4e5675d3f9e3399a9f408523dd01cf3d8f56ba3a","text/plain":"<Figure size 720x360 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":21,"start":1655299488433,"state":"done","type":"cell"}
{"cell_type":"code","end":1655299488639,"exec_count":12,"id":"a2c3e7","input":"print(linr.score(x_test, y_test))","kernel":"ds_env","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CS2KN6gms_io","outputId":"4f865d48-e1ea-4e80-ebb1-869f5f2052b0"},"no_halt":true,"output":{"0":{"name":"stdout","text":"0.6720392107857677\n"}},"pos":23,"start":1655299488628,"state":"done","type":"cell"}
{"cell_type":"code","end":1655299488651,"exec_count":13,"id":"3d4dc4","input":"MAE = np.mean(abs(y_test - y_hat))\nMAE","kernel":"ds_env","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"osxC5vVotKWS","outputId":"aa7e2d67-12af-4389-e7e0-4c23b23e8bf4"},"no_halt":true,"output":{"0":{"data":{"text/plain":"8.988585235103281"},"exec_count":13}},"pos":24,"start":1655299488644,"state":"done","type":"cell"}
{"cell_type":"code","end":1655299495414,"exec_count":37,"id":"00386a","input":"sns.heatmap(merged_zip.corr())","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":37},"1":{"data":{"image/png":"6f577cc6798a254b21e88a41156f9f92203f1b94","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":51,"start":1655299494968,"state":"done","type":"cell"}
{"cell_type":"code","end":1655299496722,"exec_count":42,"id":"4e1fc7","input":"from sklearn.linear_model import LinearRegression\n\nlinr = LinearRegression()\n\nlinr.fit(x_train, y_train)\nprint(linr.intercept_, linr.coef_[0])","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"[58238.79689671] [269.86758074]\n"}},"pos":57,"start":1655299496703,"state":"done","type":"cell"}
{"cell_type":"code","end":1655299496732,"exec_count":43,"id":"d7ece8","input":"y_hat = linr.predict(x_test)","kernel":"ds_env","no_halt":true,"pos":58,"start":1655299496725,"state":"done","type":"cell"}
{"cell_type":"code","end":1655299496963,"exec_count":44,"id":"8c43a6","input":"plt.figure(figsize=(10,5))\nplt.plot(x_test, y_hat, '--')\n\nplt.scatter(x_test,y_test, c='orange')  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\nplt.show()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"image/png":"1b7e997650fe421d730af2eebc5f7207ca8eae38","text/plain":"<Figure size 720x360 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":59,"scrolled":true,"start":1655299496734,"state":"done","type":"cell"}
{"cell_type":"code","end":1655299496978,"exec_count":45,"id":"df4377","input":"print(linr.score(x_test, y_test))","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"0.37469639393488985\n"}},"pos":60,"start":1655299496973,"state":"done","type":"cell"}
{"cell_type":"code","end":1655299497452,"exec_count":46,"id":"d6b273","input":"sns.heatmap(merged_zip.corr())","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":46},"1":{"data":{"image/png":"6f577cc6798a254b21e88a41156f9f92203f1b94","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":63,"scrolled":true,"start":1655299496981,"state":"done","type":"cell"}
{"cell_type":"code","end":1655299497464,"exec_count":47,"id":"8e20c3","input":"a = merged_zip[\"yr_age\"].to_numpy()\nb = merged_zip[\"price\"].to_numpy()","kernel":"ds_env","no_halt":true,"pos":64,"start":1655299497460,"state":"done","type":"cell"}
{"cell_type":"code","end":1655299497473,"exec_count":48,"id":"b00c85","input":"from sklearn.model_selection import train_test_split\n\na_train, a_test, b_train, b_test = train_test_split(a, b, test_size=0.2, random_state=42)\na_train= a_train.reshape(-1, 1)\na_test = a_test.reshape(-1, 1)\n","kernel":"ds_env","no_halt":true,"pos":65,"start":1655299497468,"state":"done","type":"cell"}
{"cell_type":"code","end":1655299497840,"exec_count":49,"id":"555163","input":"plt.figure(figsize=(10,5))\n \nplt.subplot(1,2,1)\nplt.scatter(a_train,b_train, c='orange')  \nplt.xlabel('a', fontsize = 20) \nplt.ylabel('b', fontsize = 20)\nplt.title('Generated Data - Train')\nplt.grid('on')\n\nplt.subplot(1,2,2)\nplt.scatter(a_test, b_test)  \nplt.xlabel('a', fontsize = 20) \nplt.ylabel('b', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\n\nplt.show()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"image/png":"7448d671055ee70276ff595e2fba86ba62fe3ece","text/plain":"<Figure size 720x360 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":66,"start":1655299497482,"state":"done","type":"cell"}
{"cell_type":"code","end":1655299497999,"exec_count":50,"id":"78bcd4","input":"fig1 = px.scatter(merged_zip, x=\"yr_age\", y=\"price\")\nfig1.show()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"iframe":"c3e818d73fcafc6f942a91756e55e9c260e312c9"}}},"pos":67,"scrolled":true,"start":1655299497844,"state":"done","type":"cell"}
{"cell_type":"code","end":1655299498011,"exec_count":51,"id":"7d8762","input":"from sklearn.linear_model import LinearRegression\n\nlinr = LinearRegression()\n\nlinr.fit(a_train, b_train)\nprint(linr.intercept_, linr.coef_[0])","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"570920.9605436636 -701.2994146412311\n"}},"pos":69,"start":1655299498003,"state":"done","type":"cell"}
{"cell_type":"code","end":1655299498019,"exec_count":52,"id":"a04d19","input":"b_hat = linr.predict(a_test)","kernel":"ds_env","no_halt":true,"pos":70,"start":1655299498014,"state":"done","type":"cell"}
{"cell_type":"code","end":1655299498206,"exec_count":53,"id":"b5035f","input":"plt.figure(figsize=(10,5))\nplt.plot(a_test, b_hat, '--')\n\nplt.scatter(a_test,b_test, c='orange')  \nplt.xlabel('a', fontsize = 20) \nplt.ylabel('b', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\nplt.show()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"image/png":"b66a9bb2b1c5fbadddee336ea19db0839415217e","text/plain":"<Figure size 720x360 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":71,"start":1655299498025,"state":"done","type":"cell"}
{"cell_type":"code","end":1655299498215,"exec_count":54,"id":"0e3aa6","input":"print(linr.score(a_test, b_test))","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"0.002131120024567057\n"}},"pos":72,"start":1655299498211,"state":"done","type":"cell"}
{"cell_type":"code","end":1655299498224,"exec_count":55,"id":"1cf7f2","input":"MAE = np.mean(abs(b_test - b_hat))\nMAE","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"230994.89775927507"},"exec_count":55}},"pos":73,"start":1655299498218,"state":"done","type":"cell"}
{"cell_type":"code","end":1655299498235,"exec_count":56,"id":"8c5526","input":"c = merged_zip[\"condition\"].to_numpy()\nd = merged_zip[\"price\"].to_numpy()","kernel":"ds_env","no_halt":true,"pos":75,"start":1655299498234,"state":"done","type":"cell"}
{"cell_type":"code","end":1655299498243,"exec_count":57,"id":"6e8e6c","input":"from sklearn.model_selection import train_test_split\n\nc_train, c_test, d_train, d_test = train_test_split(c, d, test_size=0.2, random_state=42)\nc_train= c_train.reshape(-1, 1)\nc_test = c_test.reshape(-1, 1)","kernel":"ds_env","no_halt":true,"pos":76,"start":1655299498237,"state":"done","type":"cell"}
{"cell_type":"code","end":1655299498569,"exec_count":58,"id":"dacc46","input":"plt.figure(figsize=(10,5))\n \nplt.subplot(1,2,1)\nplt.scatter(c_train,d_train, c='orange')  \nplt.xlabel('c', fontsize = 20) \nplt.ylabel('d', fontsize = 20)\nplt.title('Generated Data - Train')\nplt.grid('on')\n\nplt.subplot(1,2,2)\nplt.scatter(a_test, b_test)  \nplt.xlabel('c', fontsize = 20) \nplt.ylabel('d', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\n\nplt.show()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"image/png":"004077b14ed1dbb63ec4d1b025f462b08561e8b0","text/plain":"<Figure size 720x360 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":77,"start":1655299498245,"state":"done","type":"cell"}
{"cell_type":"code","end":1655299498725,"exec_count":59,"id":"0eae55","input":"fig1 = px.scatter(merged_zip, x=\"condition\", y=\"price\")\nfig1.show()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"iframe":"429f1daa6f0ccd369f9e677072220708bc648ec2"}}},"pos":78,"start":1655299498574,"state":"done","type":"cell"}
{"cell_type":"code","end":1655301073211,"exec_count":77,"id":"6e055b","input":"lst = []\nfor feature in temp_df.columns:\n    lst.append(feature)\n    print(lst)\n    X = temp_df[lst].to_numpy()\n    y = merged_zip[\"price\"].to_numpy()\n    b_train, b_test, c_train, c_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    if len(lst) == 1:\n        b_train.reshape(-1,1)\n        c_train.reshape(-1,1)\n    linreg = LinearRegression()\n    linreg.fit(b_train, c_train)\n    yhat = linreg.predict(b_test)\n    #print(linreg.score(b_test, c_test))\n    meanavg = np.mean(abs(c_test-yhat))\n    #print(\" \" , meanavg)\n    if linreg.score(b_test, c_test) > highest_score:\n        highest_score = linreg.score(b_test, c_test)\n    print(highest_score)\n        ","kernel":"ds_env","output":{"0":{"name":"stdout","text":"['bedrooms']\n0.10110407509553343\n['bedrooms', 'bathrooms']\n0.27410146616687814\n['bedrooms', 'bathrooms', 'sqft_living']\n0.5029996890804095\n['bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot']\n0.5053647482215009\n['bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors']\n0.5053647482215009\n['bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront']\n0.5263340967759287\n['bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view']\n0.5450566796372054\n['bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition']\n0.5546252629362318\n['bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade']\n0.5966856631818063\n['bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above']\n0.5979115394004765\n['bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement']\n0.5979115394004765\n['bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built']\n0.6484410933573423\n['bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'sqft_living15']\n0.6502778651556105\n['bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'sqft_living15', 'sqft_lot15']\n0.6508947524513415\n['bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'sqft_living15', 'sqft_lot15', 'yr_age']\n0.6521534118663987\n['bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'sqft_living15', 'sqft_lot15', 'yr_age', 'renovation']\n0.6521534118663987\n"}},"pos":43,"start":1655301073024,"state":"done","type":"cell"}
{"cell_type":"code","end":1655307448615,"exec_count":103,"id":"b6e9f3","input":"plt.figure(figsize=(10,5))\nplt.plot(G_test, y_hat, '--')\n\nplt.scatter(G_test,E_test, c='orange')  \nplt.xlabel('G', fontsize = 20) \nplt.ylabel('E', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\nplt.show()","kernel":"ds_env","output":{"0":{"data":{"image/png":"1148c054bfbfefc335709b8be742dcc7132c4e1a","text/plain":"<Figure size 720x360 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":48,"start":1655307448335,"state":"done","type":"cell"}
{"cell_type":"code","end":1655307490089,"exec_count":105,"id":"d10869","input":"MAE = np.mean(abs(E_test - y_hat))\nMAE","kernel":"ds_env","output":{"0":{"data":{"text/plain":"293158.1998741487"},"exec_count":105}},"pos":50,"start":1655307489942,"state":"done","type":"cell"}
{"cell_type":"code","end":1655317252904,"id":"8e26fa","input":"if sqft.shape[0] != y.shape[0]:\n  print(\"It looks like you have missing data. You may want to preprocess your data more with pandas to delete any rows with missing, NaN, N/A, and null values.\")\n  \nidx = np.arange(length) \nnp.random.shuffle(idx)\n\nsplit_threshold = int(length * 0.8)\n\ntrain_idx = idx[:split_threshold]\n\ntest_idx = idx[split_threshold:]\n\nx_train, y_train = sqft[train_idx], y[train_idx]\nx_test, y_test = sqft[test_idx], y[test_idx]\nx_train= x_train.reshape(-1, 1)\ny_train= y_train.reshape(-1, 1)\nx_test = x_test.reshape(-1, 1)","kernel":"ds_env","pos":55,"start":1655317252904,"state":"done","type":"cell"}
{"cell_type":"code","end":1655317252905,"id":"aa2b68","input":"plt.figure(figsize=(10,5))\n \nplt.subplot(1,2,1)\nplt.scatter(x_train,y_train, c='orange')  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Train')\nplt.grid('on')\n\nplt.subplot(1,2,2)\nplt.scatter(x_test, y_test)  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\n\nplt.show()","kernel":"ds_env","pos":56,"scrolled":true,"start":1655317252905,"state":"done","type":"cell"}
{"cell_type":"code","end":1655317400548,"exec_count":24,"id":"2d31a3","input":"length = len(merged_zip.index)\n\nX = merged_zip[[\"bedrooms\", \"bathrooms\", \"sqft_living\", \"yr_age\"]].to_numpy()\ny = merged_zip[\"price\"].to_numpy()","kernel":"ds_env","output":{"0":{"ename":"KeyError","evalue":"\"['yr_age'] not in index\"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","Input \u001b[0;32mIn [24]\u001b[0m, in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m length \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mlen\u001b[39m(merged_zip\u001b[38;5;241m.\u001b[39mindex)\n\u001b[0;32m----> 3\u001b[0m X \u001b[38;5;241m=\u001b[39m \u001b[43mmerged_zip\u001b[49m\u001b[43m[\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mbedrooms\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mbathrooms\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43msqft_living\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43myr_age\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m]\u001b[49m\u001b[38;5;241m.\u001b[39mto_numpy()\n\u001b[1;32m      4\u001b[0m y \u001b[38;5;241m=\u001b[39m merged_zip[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mprice\u001b[39m\u001b[38;5;124m\"\u001b[39m]\u001b[38;5;241m.\u001b[39mto_numpy()\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/pandas/core/frame.py:3511\u001b[0m, in \u001b[0;36mDataFrame.__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3509\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m is_iterator(key):\n\u001b[1;32m   3510\u001b[0m         key \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mlist\u001b[39m(key)\n\u001b[0;32m-> 3511\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcolumns\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_get_indexer_strict\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mcolumns\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m[\u001b[38;5;241m1\u001b[39m]\n\u001b[1;32m   3513\u001b[0m \u001b[38;5;66;03m# take() does not accept boolean indexers\u001b[39;00m\n\u001b[1;32m   3514\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mgetattr\u001b[39m(indexer, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdtype\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m) \u001b[38;5;241m==\u001b[39m \u001b[38;5;28mbool\u001b[39m:\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/pandas/core/indexes/base.py:5782\u001b[0m, in \u001b[0;36mIndex._get_indexer_strict\u001b[0;34m(self, key, axis_name)\u001b[0m\n\u001b[1;32m   5779\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m   5780\u001b[0m     keyarr, indexer, new_indexer \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_reindex_non_unique(keyarr)\n\u001b[0;32m-> 5782\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_raise_if_missing\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkeyarr\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mindexer\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis_name\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   5784\u001b[0m keyarr \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtake(indexer)\n\u001b[1;32m   5785\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(key, Index):\n\u001b[1;32m   5786\u001b[0m     \u001b[38;5;66;03m# GH 42790 - Preserve name from an Index\u001b[39;00m\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/pandas/core/indexes/base.py:5845\u001b[0m, in \u001b[0;36mIndex._raise_if_missing\u001b[0;34m(self, key, indexer, axis_name)\u001b[0m\n\u001b[1;32m   5842\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mNone of [\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mkey\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m] are in the [\u001b[39m\u001b[38;5;132;01m{\u001b[39;00maxis_name\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m]\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m   5844\u001b[0m not_found \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mlist\u001b[39m(ensure_index(key)[missing_mask\u001b[38;5;241m.\u001b[39mnonzero()[\u001b[38;5;241m0\u001b[39m]]\u001b[38;5;241m.\u001b[39munique())\n\u001b[0;32m-> 5845\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mnot_found\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m not in index\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n","\u001b[0;31mKeyError\u001b[0m: \"['yr_age'] not in index\""]}},"pos":41,"start":1655317400404,"state":"done","type":"cell"}
{"cell_type":"code","end":1655317424003,"exec_count":30,"id":"babb15","input":"\nG_train, G_test, E_train, E_test = train_test_split(G, E, test_size=0.2, random_state=42)","kernel":"ds_env","pos":44,"start":1655317423995,"state":"done","type":"cell"}
{"cell_type":"code","end":1655317426670,"exec_count":31,"id":"d0516d","input":"plt.figure(figsize=(10,5))\n \nplt.subplot(1,2,1)\nplt.scatter(G_train,E_train, c='orange')  \nplt.xlabel('G', fontsize = 20) \nplt.ylabel('E', fontsize = 20)\nplt.title('Generated Data - Train')\nplt.grid('on')\n\nplt.subplot(1,2,2)\nplt.scatter(G_test, E_test)  \nplt.xlabel('G', fontsize = 20) \nplt.ylabel('E', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\n\nplt.show()","kernel":"ds_env","output":{"0":{"ename":"ValueError","evalue":"x and y must be the same size","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Input \u001b[0;32mIn [31]\u001b[0m, in \u001b[0;36m<cell line: 4>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m plt\u001b[38;5;241m.\u001b[39mfigure(figsize\u001b[38;5;241m=\u001b[39m(\u001b[38;5;241m10\u001b[39m,\u001b[38;5;241m5\u001b[39m))\n\u001b[1;32m      3\u001b[0m plt\u001b[38;5;241m.\u001b[39msubplot(\u001b[38;5;241m1\u001b[39m,\u001b[38;5;241m2\u001b[39m,\u001b[38;5;241m1\u001b[39m)\n\u001b[0;32m----> 4\u001b[0m \u001b[43mplt\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mscatter\u001b[49m\u001b[43m(\u001b[49m\u001b[43mG_train\u001b[49m\u001b[43m,\u001b[49m\u001b[43mE_train\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mc\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43morange\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m  \n\u001b[1;32m      5\u001b[0m plt\u001b[38;5;241m.\u001b[39mxlabel(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mG\u001b[39m\u001b[38;5;124m'\u001b[39m, fontsize \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m20\u001b[39m) \n\u001b[1;32m      6\u001b[0m plt\u001b[38;5;241m.\u001b[39mylabel(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mE\u001b[39m\u001b[38;5;124m'\u001b[39m, fontsize \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m20\u001b[39m)\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/matplotlib/pyplot.py:2807\u001b[0m, in \u001b[0;36mscatter\u001b[0;34m(x, y, s, c, marker, cmap, norm, vmin, vmax, alpha, linewidths, edgecolors, plotnonfinite, data, **kwargs)\u001b[0m\n\u001b[1;32m   2802\u001b[0m \u001b[38;5;129m@_copy_docstring_and_deprecators\u001b[39m(Axes\u001b[38;5;241m.\u001b[39mscatter)\n\u001b[1;32m   2803\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mscatter\u001b[39m(\n\u001b[1;32m   2804\u001b[0m         x, y, s\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, c\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, marker\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, cmap\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, norm\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[1;32m   2805\u001b[0m         vmin\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, vmax\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, alpha\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, linewidths\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, \u001b[38;5;241m*\u001b[39m,\n\u001b[1;32m   2806\u001b[0m         edgecolors\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, plotnonfinite\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m, data\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[0;32m-> 2807\u001b[0m     __ret \u001b[38;5;241m=\u001b[39m \u001b[43mgca\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mscatter\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   2808\u001b[0m \u001b[43m        \u001b[49m\u001b[43mx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43ms\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43ms\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mc\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mc\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmarker\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mmarker\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcmap\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcmap\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mnorm\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mnorm\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   2809\u001b[0m \u001b[43m        \u001b[49m\u001b[43mvmin\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mvmin\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mvmax\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mvmax\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43malpha\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43malpha\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlinewidths\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlinewidths\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   2810\u001b[0m \u001b[43m        \u001b[49m\u001b[43medgecolors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43medgecolors\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mplotnonfinite\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mplotnonfinite\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   2811\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m{\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mdata\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[43mdata\u001b[49m\u001b[43m}\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mif\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mdata\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;129;43;01mis\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[38;5;129;43;01mnot\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[38;5;28;43;01melse\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43m{\u001b[49m\u001b[43m}\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   2812\u001b[0m     sci(__ret)\n\u001b[1;32m   2813\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m __ret\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/matplotlib/__init__.py:1412\u001b[0m, in \u001b[0;36m_preprocess_data.<locals>.inner\u001b[0;34m(ax, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1409\u001b[0m \u001b[38;5;129m@functools\u001b[39m\u001b[38;5;241m.\u001b[39mwraps(func)\n\u001b[1;32m   1410\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21minner\u001b[39m(ax, \u001b[38;5;241m*\u001b[39margs, data\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[1;32m   1411\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m data \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m-> 1412\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfunc\u001b[49m\u001b[43m(\u001b[49m\u001b[43max\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;28;43mmap\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43msanitize_sequence\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43margs\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1414\u001b[0m     bound \u001b[38;5;241m=\u001b[39m new_sig\u001b[38;5;241m.\u001b[39mbind(ax, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m   1415\u001b[0m     auto_label \u001b[38;5;241m=\u001b[39m (bound\u001b[38;5;241m.\u001b[39marguments\u001b[38;5;241m.\u001b[39mget(label_namer)\n\u001b[1;32m   1416\u001b[0m                   \u001b[38;5;129;01mor\u001b[39;00m bound\u001b[38;5;241m.\u001b[39mkwargs\u001b[38;5;241m.\u001b[39mget(label_namer))\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/matplotlib/axes/_axes.py:4369\u001b[0m, in \u001b[0;36mAxes.scatter\u001b[0;34m(self, x, y, s, c, marker, cmap, norm, vmin, vmax, alpha, linewidths, edgecolors, plotnonfinite, **kwargs)\u001b[0m\n\u001b[1;32m   4367\u001b[0m y \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mma\u001b[38;5;241m.\u001b[39mravel(y)\n\u001b[1;32m   4368\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m x\u001b[38;5;241m.\u001b[39msize \u001b[38;5;241m!=\u001b[39m y\u001b[38;5;241m.\u001b[39msize:\n\u001b[0;32m-> 4369\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mx and y must be the same size\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m   4371\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m s \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m   4372\u001b[0m     s \u001b[38;5;241m=\u001b[39m (\u001b[38;5;241m20\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m rcParams[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m_internal.classic_mode\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;28;01melse\u001b[39;00m\n\u001b[1;32m   4373\u001b[0m          rcParams[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mlines.markersize\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39m \u001b[38;5;241m2.0\u001b[39m)\n","\u001b[0;31mValueError\u001b[0m: x and y must be the same size"]},"1":{"data":{"image/png":"f4e63d2dacb6ae6c220a869e7a769241d69dc68a","text/plain":"<Figure size 720x360 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":45,"start":1655317424684,"state":"done","type":"cell"}
{"cell_type":"code","end":1655317429558,"exec_count":32,"id":"188dc1","input":"E_train.shape","kernel":"ds_env","output":{"0":{"data":{"text/plain":"(17290,)"},"exec_count":32}},"pos":46,"start":1655317429536,"state":"done","type":"cell"}
{"cell_type":"code","end":1655317443530,"exec_count":35,"id":"2886ce","input":"temp_df = merged_zip.drop([\"price\"], axis = 1)\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.linear_model import LinearRegression\n\n#degree=9\n#polyreg=make_pipeline(PolynomialFeatures(degree),LinearRegression())\n\n# x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\nhighest_score = 0","kernel":"ds_env","pos":42,"start":1655317443515,"state":"done","type":"cell"}
{"cell_type":"code","end":1655317601020,"id":"c9559d","input":"merged_zip.head()","kernel":"ds_env","pos":38,"start":1655317601020,"state":"done","type":"cell"}
{"cell_type":"code","end":1655317763821,"exec_count":43,"id":"2f9ac9","input":"# import libraries \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport statistics","kernel":"ds_env","metadata":{"id":"IecuRdF1a-sG"},"pos":1,"start":1655317763807,"state":"done","type":"cell"}
{"cell_type":"code","end":1655317787349,"exec_count":45,"id":"def1b0","input":"housePrice = pd.read_csv(\"Data/kc_house_data.csv\")\nzipcodedf = pd.read_csv(\"Data/usa_zipcode_of_wa.csv\")\nhousePrice.head()","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>date</th>\n      <th>price</th>\n      <th>bedrooms</th>\n      <th>bathrooms</th>\n      <th>sqft_living</th>\n      <th>sqft_lot</th>\n      <th>floors</th>\n      <th>waterfront</th>\n      <th>view</th>\n      <th>...</th>\n      <th>grade</th>\n      <th>sqft_above</th>\n      <th>sqft_basement</th>\n      <th>yr_built</th>\n      <th>yr_renovated</th>\n      <th>zipcode</th>\n      <th>lat</th>\n      <th>long</th>\n      <th>sqft_living15</th>\n      <th>sqft_lot15</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>7129300520</td>\n      <td>20141013T000000</td>\n      <td>221900.0</td>\n      <td>3</td>\n      <td>1.00</td>\n      <td>1180</td>\n      <td>5650</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>7</td>\n      <td>1180</td>\n      <td>0</td>\n      <td>1955</td>\n      <td>0</td>\n      <td>98178</td>\n      <td>47.5112</td>\n      <td>-122.257</td>\n      <td>1340</td>\n      <td>5650</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>6414100192</td>\n      <td>20141209T000000</td>\n      <td>538000.0</td>\n      <td>3</td>\n      <td>2.25</td>\n      <td>2570</td>\n      <td>7242</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>7</td>\n      <td>2170</td>\n      <td>400</td>\n      <td>1951</td>\n      <td>1991</td>\n      <td>98125</td>\n      <td>47.7210</td>\n      <td>-122.319</td>\n      <td>1690</td>\n      <td>7639</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>5631500400</td>\n      <td>20150225T000000</td>\n      <td>180000.0</td>\n      <td>2</td>\n      <td>1.00</td>\n      <td>770</td>\n      <td>10000</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>6</td>\n      <td>770</td>\n      <td>0</td>\n      <td>1933</td>\n      <td>0</td>\n      <td>98028</td>\n      <td>47.7379</td>\n      <td>-122.233</td>\n      <td>2720</td>\n      <td>8062</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2487200875</td>\n      <td>20141209T000000</td>\n      <td>604000.0</td>\n      <td>4</td>\n      <td>3.00</td>\n      <td>1960</td>\n      <td>5000</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>7</td>\n      <td>1050</td>\n      <td>910</td>\n      <td>1965</td>\n      <td>0</td>\n      <td>98136</td>\n      <td>47.5208</td>\n      <td>-122.393</td>\n      <td>1360</td>\n      <td>5000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1954400510</td>\n      <td>20150218T000000</td>\n      <td>510000.0</td>\n      <td>3</td>\n      <td>2.00</td>\n      <td>1680</td>\n      <td>8080</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>8</td>\n      <td>1680</td>\n      <td>0</td>\n      <td>1987</td>\n      <td>0</td>\n      <td>98074</td>\n      <td>47.6168</td>\n      <td>-122.045</td>\n      <td>1800</td>\n      <td>7503</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 21 columns</p>\n</div>","text/plain":"           id             date     price  bedrooms  bathrooms  sqft_living  \\\n0  7129300520  20141013T000000  221900.0         3       1.00         1180   \n1  6414100192  20141209T000000  538000.0         3       2.25         2570   \n2  5631500400  20150225T000000  180000.0         2       1.00          770   \n3  2487200875  20141209T000000  604000.0         4       3.00         1960   \n4  1954400510  20150218T000000  510000.0         3       2.00         1680   \n\n   sqft_lot  floors  waterfront  view  ...  grade  sqft_above  sqft_basement  \\\n0      5650     1.0           0     0  ...      7        1180              0   \n1      7242     2.0           0     0  ...      7        2170            400   \n2     10000     1.0           0     0  ...      6         770              0   \n3      5000     1.0           0     0  ...      7        1050            910   \n4      8080     1.0           0     0  ...      8        1680              0   \n\n   yr_built  yr_renovated  zipcode      lat     long  sqft_living15  \\\n0      1955             0    98178  47.5112 -122.257           1340   \n1      1951          1991    98125  47.7210 -122.319           1690   \n2      1933             0    98028  47.7379 -122.233           2720   \n3      1965             0    98136  47.5208 -122.393           1360   \n4      1987             0    98074  47.6168 -122.045           1800   \n\n   sqft_lot15  \n0        5650  \n1        7639  \n2        8062  \n3        5000  \n4        7503  \n\n[5 rows x 21 columns]"},"exec_count":45}},"pos":27,"start":1655317787265,"state":"done","type":"cell"}
{"cell_type":"code","end":1655317790732,"exec_count":46,"id":"e1be31","input":"zipcodedf = zipcodedf.dropna(subset=['City'])\nzipcodedf = zipcodedf.rename(columns = {\"zip\":\"zipcode\"})\nzipcodedf","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>zipcode</th>\n      <th>Zipcode name</th>\n      <th>City</th>\n      <th>State</th>\n      <th>County Name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>98520</td>\n      <td>ABERDEEN, WA</td>\n      <td>ABERDEEN</td>\n      <td>WA</td>\n      <td>GRAYS HARBOR</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>98220</td>\n      <td>ACME, WA</td>\n      <td>ACME</td>\n      <td>WA</td>\n      <td>WHATCOM</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>99101</td>\n      <td>ADDY, WA</td>\n      <td>ADDY</td>\n      <td>WA</td>\n      <td>STEVENS</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>98522</td>\n      <td>ADNA, WA</td>\n      <td>ADNA</td>\n      <td>WA</td>\n      <td>LEWIS</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>99001</td>\n      <td>AIRWAY HEIGHTS, WA</td>\n      <td>AIRWAY HEIGHTS</td>\n      <td>WA</td>\n      <td>SPOKANE</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>688</th>\n      <td>98907</td>\n      <td>YAKIMA, WA</td>\n      <td>YAKIMA</td>\n      <td>WA</td>\n      <td>YAKIMA</td>\n    </tr>\n    <tr>\n      <th>689</th>\n      <td>98908</td>\n      <td>YAKIMA, WA</td>\n      <td>YAKIMA</td>\n      <td>WA</td>\n      <td>YAKIMA</td>\n    </tr>\n    <tr>\n      <th>690</th>\n      <td>98909</td>\n      <td>YAKIMA, WA</td>\n      <td>YAKIMA</td>\n      <td>WA</td>\n      <td>YAKIMA</td>\n    </tr>\n    <tr>\n      <th>691</th>\n      <td>98597</td>\n      <td>YELM, WA</td>\n      <td>YELM</td>\n      <td>WA</td>\n      <td>THURSTON</td>\n    </tr>\n    <tr>\n      <th>692</th>\n      <td>98953</td>\n      <td>ZILLAH, WA</td>\n      <td>ZILLAH</td>\n      <td>WA</td>\n      <td>YAKIMA</td>\n    </tr>\n  </tbody>\n</table>\n<p>693 rows × 5 columns</p>\n</div>","text/plain":"    zipcode        Zipcode name            City State   County Name\n0     98520        ABERDEEN, WA        ABERDEEN    WA  GRAYS HARBOR\n1     98220            ACME, WA            ACME    WA       WHATCOM\n2     99101            ADDY, WA            ADDY    WA       STEVENS\n3     98522            ADNA, WA            ADNA    WA         LEWIS\n4     99001  AIRWAY HEIGHTS, WA  AIRWAY HEIGHTS    WA       SPOKANE\n..      ...                 ...             ...   ...           ...\n688   98907          YAKIMA, WA          YAKIMA    WA        YAKIMA\n689   98908          YAKIMA, WA          YAKIMA    WA        YAKIMA\n690   98909          YAKIMA, WA          YAKIMA    WA        YAKIMA\n691   98597            YELM, WA            YELM    WA      THURSTON\n692   98953          ZILLAH, WA          ZILLAH    WA        YAKIMA\n\n[693 rows x 5 columns]"},"exec_count":46}},"pos":28,"start":1655317790718,"state":"done","type":"cell"}
{"cell_type":"code","end":1655317799813,"exec_count":47,"id":"b3c0f8","input":"zipcodedf['zipcode'] = zipcodedf['zipcode'].astype(int)","kernel":"ds_env","pos":29,"start":1655317799801,"state":"done","type":"cell"}
{"cell_type":"code","end":1655317802621,"exec_count":48,"id":"e0b9ac","input":"merged_zip = pd.merge(zipcodedf, housePrice, on =\"zipcode\")","kernel":"ds_env","pos":30,"start":1655317802572,"state":"done","type":"cell"}
{"cell_type":"code","end":1655317805426,"exec_count":49,"id":"0a6799","input":"merged_zip.head()","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>zipcode</th>\n      <th>Zipcode name</th>\n      <th>City</th>\n      <th>State</th>\n      <th>County Name</th>\n      <th>id</th>\n      <th>date</th>\n      <th>price</th>\n      <th>bedrooms</th>\n      <th>bathrooms</th>\n      <th>...</th>\n      <th>condition</th>\n      <th>grade</th>\n      <th>sqft_above</th>\n      <th>sqft_basement</th>\n      <th>yr_built</th>\n      <th>yr_renovated</th>\n      <th>lat</th>\n      <th>long</th>\n      <th>sqft_living15</th>\n      <th>sqft_lot15</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>98001</td>\n      <td>AUBURN, WA</td>\n      <td>AUBURN</td>\n      <td>WA</td>\n      <td>KING</td>\n      <td>7895500070</td>\n      <td>20150213T000000</td>\n      <td>240000.0</td>\n      <td>4</td>\n      <td>1.0</td>\n      <td>...</td>\n      <td>2</td>\n      <td>7</td>\n      <td>890</td>\n      <td>330</td>\n      <td>1969</td>\n      <td>0</td>\n      <td>47.3341</td>\n      <td>-122.282</td>\n      <td>1290</td>\n      <td>7800</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>98001</td>\n      <td>AUBURN, WA</td>\n      <td>AUBURN</td>\n      <td>WA</td>\n      <td>KING</td>\n      <td>3717000160</td>\n      <td>20141009T000000</td>\n      <td>287000.0</td>\n      <td>4</td>\n      <td>2.5</td>\n      <td>...</td>\n      <td>3</td>\n      <td>7</td>\n      <td>2240</td>\n      <td>0</td>\n      <td>2005</td>\n      <td>0</td>\n      <td>47.3378</td>\n      <td>-122.257</td>\n      <td>2221</td>\n      <td>4557</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>98001</td>\n      <td>AUBURN, WA</td>\n      <td>AUBURN</td>\n      <td>WA</td>\n      <td>KING</td>\n      <td>8961960160</td>\n      <td>20141028T000000</td>\n      <td>480000.0</td>\n      <td>4</td>\n      <td>2.5</td>\n      <td>...</td>\n      <td>3</td>\n      <td>9</td>\n      <td>2520</td>\n      <td>710</td>\n      <td>2001</td>\n      <td>0</td>\n      <td>47.3183</td>\n      <td>-122.253</td>\n      <td>2640</td>\n      <td>8517</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>98001</td>\n      <td>AUBURN, WA</td>\n      <td>AUBURN</td>\n      <td>WA</td>\n      <td>KING</td>\n      <td>4014400292</td>\n      <td>20150114T000000</td>\n      <td>465000.0</td>\n      <td>3</td>\n      <td>2.5</td>\n      <td>...</td>\n      <td>3</td>\n      <td>9</td>\n      <td>2714</td>\n      <td>0</td>\n      <td>2005</td>\n      <td>0</td>\n      <td>47.3185</td>\n      <td>-122.275</td>\n      <td>2590</td>\n      <td>18386</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>98001</td>\n      <td>AUBURN, WA</td>\n      <td>AUBURN</td>\n      <td>WA</td>\n      <td>KING</td>\n      <td>1115450240</td>\n      <td>20141022T000000</td>\n      <td>360000.0</td>\n      <td>4</td>\n      <td>2.5</td>\n      <td>...</td>\n      <td>3</td>\n      <td>9</td>\n      <td>2160</td>\n      <td>0</td>\n      <td>1992</td>\n      <td>0</td>\n      <td>47.3341</td>\n      <td>-122.255</td>\n      <td>2280</td>\n      <td>9937</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 25 columns</p>\n</div>","text/plain":"   zipcode Zipcode name    City State County Name          id  \\\n0    98001   AUBURN, WA  AUBURN    WA        KING  7895500070   \n1    98001   AUBURN, WA  AUBURN    WA        KING  3717000160   \n2    98001   AUBURN, WA  AUBURN    WA        KING  8961960160   \n3    98001   AUBURN, WA  AUBURN    WA        KING  4014400292   \n4    98001   AUBURN, WA  AUBURN    WA        KING  1115450240   \n\n              date     price  bedrooms  bathrooms  ...  condition  grade  \\\n0  20150213T000000  240000.0         4        1.0  ...          2      7   \n1  20141009T000000  287000.0         4        2.5  ...          3      7   \n2  20141028T000000  480000.0         4        2.5  ...          3      9   \n3  20150114T000000  465000.0         3        2.5  ...          3      9   \n4  20141022T000000  360000.0         4        2.5  ...          3      9   \n\n   sqft_above  sqft_basement  yr_built  yr_renovated      lat     long  \\\n0         890            330      1969             0  47.3341 -122.282   \n1        2240              0      2005             0  47.3378 -122.257   \n2        2520            710      2001             0  47.3183 -122.253   \n3        2714              0      2005             0  47.3185 -122.275   \n4        2160              0      1992             0  47.3341 -122.255   \n\n   sqft_living15  sqft_lot15  \n0           1290        7800  \n1           2221        4557  \n2           2640        8517  \n3           2590       18386  \n4           2280        9937  \n\n[5 rows x 25 columns]"},"exec_count":49}},"pos":33,"start":1655317805380,"state":"done","type":"cell"}
{"cell_type":"code","end":1655317812304,"exec_count":50,"id":"c28ccd","input":"# drop zipcode, zipcode name, id, State, lat, long, County Name\nmerged_zip = merged_zip.drop(['zipcode', 'Zipcode name', 'id', 'State', 'lat', 'long', 'County Name'], axis = 1)\nmerged_zip.info()","kernel":"ds_env","output":{"0":{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nInt64Index: 21613 entries, 0 to 21612\nData columns (total 18 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   City           21613 non-null  object \n 1   date           21613 non-null  object \n 2   price          21613 non-null  float64\n 3   bedrooms       21613 non-null  int64  \n 4   bathrooms      21613 non-null  float64\n 5   sqft_living    21613 non-null  int64  \n 6   sqft_lot       21613 non-null  int64  \n 7   floors         21613 non-null  float64\n 8   waterfront     21613 non-null  int64  \n 9   view           21613 non-null  int64  \n 10  condition      21613 non-null  int64  \n 11  grade          21613 non-null  int64  \n 12  sqft_above     21613 non-null  int64  \n 13  sqft_basement  21613 non-null  int64  \n 14  yr_built       21613 non-null  int64  \n 15  yr_renovated   21613 non-null  int64  \n 16  sqft_living15  21613 non-null  int64  \n 17  sqft_lot15     21613 non-null  int64  \ndtypes: float64(3), int64(13), object(2)\nmemory usage: 3.1+ MB\n"}},"pos":34,"start":1655317812271,"state":"done","type":"cell"}
{"cell_type":"code","end":1655317819708,"exec_count":51,"id":"6097d5","input":"# convert date into datetime and split year, month, and day from it\nmerged_zip['date'] = pd.to_datetime(merged_zip['date'])\nmerged_zip['year'] = merged_zip['date'].dt.year\nmerged_zip['month'] = merged_zip['date'].dt.month\n\n# calculate house age starting from the year that the house was sold\nmerged_zip = merged_zip.drop([\"date\"],axis = 1)\nmerged_zip['yr_age'] = abs(merged_zip['year'] - merged_zip[\"yr_built\"])\nmerged_zip['yr_age']","kernel":"ds_env","output":{"0":{"data":{"text/plain":"0        46\n1         9\n2        13\n3        10\n4        22\n         ..\n21608    26\n21609    23\n21610    20\n21611    35\n21612     1\nName: yr_age, Length: 21613, dtype: int64"},"exec_count":51}},"pos":35,"start":1655317819679,"state":"done","type":"cell"}
{"cell_type":"code","end":1655317827459,"exec_count":52,"id":"569286","input":"# use 0 and 1 to represent whether the house is renewed or not\nmerged_zip['renovation'] = np.where(merged_zip['yr_renovated']==0,0,1)\nmerged_zip.drop(['yr_renovated'], inplace=True, axis=1)\nprint(merged_zip['renovation'].value_counts())","kernel":"ds_env","output":{"0":{"name":"stdout","text":"0    20699\n1      914\nName: renovation, dtype: int64\n"}},"pos":37,"start":1655317827448,"state":"done","type":"cell"}
{"cell_type":"code","end":1655317834841,"exec_count":53,"id":"ebeb55","input":"merged_zip = pd.concat([merged_zip,pd.get_dummies(merged_zip[\"City\"],prefix = \"city\")],axis = 1)  \nmerged_zip = merged_zip.drop([\"City\"], axis = 1)\nmerged_zip.head()","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>price</th>\n      <th>bedrooms</th>\n      <th>bathrooms</th>\n      <th>sqft_living</th>\n      <th>sqft_lot</th>\n      <th>floors</th>\n      <th>waterfront</th>\n      <th>view</th>\n      <th>condition</th>\n      <th>grade</th>\n      <th>...</th>\n      <th>city_MEDINA</th>\n      <th>city_MERCER ISLAND</th>\n      <th>city_NORTH BEND</th>\n      <th>city_REDMOND</th>\n      <th>city_RENTON</th>\n      <th>city_SAMMAMISH</th>\n      <th>city_SEATTLE</th>\n      <th>city_SNOQUALMIE</th>\n      <th>city_VASHON</th>\n      <th>city_WOODINVILLE</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>240000.0</td>\n      <td>4</td>\n      <td>1.0</td>\n      <td>1220</td>\n      <td>8075</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>7</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>287000.0</td>\n      <td>4</td>\n      <td>2.5</td>\n      <td>2240</td>\n      <td>4648</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>7</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>480000.0</td>\n      <td>4</td>\n      <td>2.5</td>\n      <td>3230</td>\n      <td>16171</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>3</td>\n      <td>9</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>465000.0</td>\n      <td>3</td>\n      <td>2.5</td>\n      <td>2714</td>\n      <td>17936</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>9</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>360000.0</td>\n      <td>4</td>\n      <td>2.5</td>\n      <td>2160</td>\n      <td>9528</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>9</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 43 columns</p>\n</div>","text/plain":"      price  bedrooms  bathrooms  sqft_living  sqft_lot  floors  waterfront  \\\n0  240000.0         4        1.0         1220      8075     1.0           0   \n1  287000.0         4        2.5         2240      4648     2.0           0   \n2  480000.0         4        2.5         3230     16171     2.0           0   \n3  465000.0         3        2.5         2714     17936     2.0           0   \n4  360000.0         4        2.5         2160      9528     2.0           0   \n\n   view  condition  grade  ...  city_MEDINA  city_MERCER ISLAND  \\\n0     0          2      7  ...            0                   0   \n1     0          3      7  ...            0                   0   \n2     3          3      9  ...            0                   0   \n3     0          3      9  ...            0                   0   \n4     0          3      9  ...            0                   0   \n\n   city_NORTH BEND  city_REDMOND  city_RENTON  city_SAMMAMISH  city_SEATTLE  \\\n0                0             0            0               0             0   \n1                0             0            0               0             0   \n2                0             0            0               0             0   \n3                0             0            0               0             0   \n4                0             0            0               0             0   \n\n   city_SNOQUALMIE  city_VASHON  city_WOODINVILLE  \n0                0            0                 0  \n1                0            0                 0  \n2                0            0                 0  \n3                0            0                 0  \n4                0            0                 0  \n\n[5 rows x 43 columns]"},"exec_count":53}},"pos":39,"start":1655317834810,"state":"done","type":"cell"}
{"cell_type":"code","end":1655320629053,"exec_count":117,"id":"9b9a75","input":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport statistics\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom plotly.offline import iplot\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n","kernel":"ds_env","pos":26,"start":1655320629040,"state":"done","type":"cell"}
{"cell_type":"code","end":1655320705470,"exec_count":118,"id":"70acc9","input":"parameters={\"splitter\":[\"best\",\"random\"],\n            \"max_depth\" : [1,3,5,7],\n           \"min_samples_leaf\":[1,2,3],\n           \"min_weight_fraction_leaf\":[0.2,0.3,0.4,0.5],\n           \"max_features\":[\"auto\",\"log2\",\"sqrt\",None],\n           \"max_leaf_nodes\":[None,10,30,40] }\n\ntuning_model=GridSearchCV(regressor,param_grid=parameters,scoring='neg_mean_squared_error',cv=3,verbose=1)\n\ntuning_model.fit(x_train, y_train)\nprint(tuning_model.best_params_)\nPrice = tuning_model.predict(x_test)\nprint(r2_score(y_test,Price))","kernel":"ds_env","output":{"0":{"name":"stdout","text":"Fitting 3 folds for each of 1536 candidates, totalling 4608 fits\n"},"1":{"name":"stdout","text":"{'max_depth': 3, 'max_features': 'auto', 'max_leaf_nodes': None, 'min_samples_leaf': 1, 'min_weight_fraction_leaf': 0.2, 'splitter': 'best'}\n0.40459383953078853\n"}},"pos":54,"scrolled":true,"start":1655320650320,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":104,"id":"243e8b","input":"print(linr.score(G_test, E_test))\n","kernel":"ds_env","output":{"0":{"name":"stdout","text":"0.10926882105108959\n"}},"pos":49,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":33,"id":"41e27a","input":"y_hat = linr.predict(G_test)","kernel":"ds_env","no_halt":true,"pos":47,"state":"done","type":"cell"}
{"cell_type":"code","id":"135593","input":"","pos":68,"state":"done","type":"cell"}
{"cell_type":"code","id":"44178f","input":"fig1 = px.scatter(merged_zip, x=\"sqft_above\", y=\"price\")\nfig1.show()","kernel":"ds_env","pos":53,"state":"done","type":"cell"}
{"cell_type":"code","id":"6905e6","input":"","pos":79,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"00926d","input":"# Linear regression using SKLearn on your own Data!\nThis should look familiar... we now are going to use linear regression on some of our own features. I recommend walking through the code below first, then importing your dataset and working through the same problem with your data!","metadata":{"id":"K_X2fB9ta-rv"},"pos":0,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"067d98","input":"### Split the data\nOur model should ignore 20% of data points to use for testing so it doesn't just memorize the data. We need to make sure there are no missing data points before continuing.","metadata":{"id":"g5Zk8_6ksLur"},"pos":13,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"0b607f","input":"### Creating Predictions\nPredict outputs on our x_test data that we held out. Think of this as a way to see how the model does on new data!","metadata":{"id":"QFb-_EiFrvzQ"},"pos":19,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"0c608c","input":"### Creating and Fitting","metadata":{"id":"e1m-wKeYsFEl"},"pos":17,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"0e742b","input":"### Results and Evaluation\nOne way to see if the model is pretty good is the coefficient of determination (R^2) using the `score()` function. You can read about it here: https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html#sklearn.linear_model.LinearRegression.score.\n\nAnother way is to compare our mean absolute error (MAE). MAE measures the prediction error. Mathematically, it is the average absolute difference between observed and predicted outcomes, MAE = mean(abs(observeds - predicteds)). MAE is less sensitive to outliers compared to RMSE.\n\nRead some more about regression model metrics [here](http://www.sthda.com/english/articles/38-regression-model-validation/158-regression-model-accuracy-metrics-r-square-aic-bic-cp-and-more/).","metadata":{"id":"14TdY4RGr-RG"},"pos":22,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"2a3f2d","input":"# Our own data\n\nTry running linear regression on multiple combinations of features (columns) on your dataset. What combination yields the best score? How does this connect to your correlation chart? \n\n","metadata":{"id":"2OixzlOot-U6"},"pos":25,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"506559","input":"#### Data Cleaning\n\n","pos":31,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"5602af","input":"pandas docs - https://pandas.pydata.org/docs/reference/index.html#api <br>\nseaborn docs - https://seaborn.pydata.org/api.html","pos":4,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"598da1","input":"Read in your data into a pandas dataframe by replacing the `filename` variable with your file's path. You can also use the current code below to work on a mpg dataset, where the target variable we are predicting is **miles per gallon** based on other car features. \n\n> We should choose two columns that we want to run regresssion on. Use the `.head()` function to decide which columns would be best!\n\n","metadata":{"id":"m4-2ySg9W0Fw"},"pos":3,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"62604a","input":"[https://stackoverflow.com/questions/61555486/what\\-is\\-x\\-train\\-reshape\\-and\\-what\\-it\\-does](https://stackoverflow.com/questions/61555486/what-is-x-train-reshape-and-what-it-does)  \n\n","pos":52.625,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"6b242a","input":"year/age compared to price \n","pos":62,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"87c05f","input":"condition compared to price \n","pos":74,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"8883ce","input":"Linear regression naturally works best on highly correlated data, so I'm going to create a heatmap to see which variables are correlated! ","metadata":{"id":"J3L_hb0Ou4sn"},"pos":8,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"8e151b","input":"### Polynomial Features regression:\n\n","pos":40,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"90d5ad","input":"### Decision Tree:\n\n","pos":52,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"baa0a8","input":"np docs - https://numpy.org/doc/stable/reference/index.html#reference","pos":14,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"d76532","input":"# Linear Regression with Scikit-learn's linear regression\n\nWe can use Scikit-Learn’s Linear Regression to fit the model. Most other models we will use in the course \n\nhttps://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html","metadata":{"id":"cbeaQMpna-sR"},"pos":12,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"e0cf2d","input":"### Getting to know the problem\n\nFor my data, my columns inlude `'mpg', 'cylinders', 'displacement', 'horsepower', 'weight', 'acceleration', 'model_year', 'origin', and 'name'`. \n\nTo start, I would like to create a linear regression model that uses horsepower (X) to predict miles per gallon (y) and see how strong our linear regression model is. For your data, you should choose two columns as well to represent X and y.\n","metadata":{"id":"w78dUshNZarz"},"pos":10,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"e536bd","input":"### Neural Network:\n\n","pos":61,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"fe4a94","input":"# Data Loading, Cleaning, and Setup","metadata":{"id":"JlrQHpg8a-sI"},"pos":2,"state":"done","type":"cell"}
{"end":1655317422788,"exec_count":29,"id":"4e1b99","input":"G = merged_zip[['bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'sqft_living15', 'sqft_lot15', 'yr_age']]\nE = merged_zip[\"price\"]","kernel":"ds_env","pos":43.5,"start":1655317422782,"state":"done","type":"cell"}
{"end":1655318520423,"exec_count":66,"id":"5b5389","input":"from sklearn.model_selection import cross_val_score\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import r2_score\n\nX_tree = merged_zip.drop([\"price\"], axis = 1)\ny_tree = merged_zip[\"price\"]\n\n\nregressor = DecisionTreeRegressor(random_state=0)\n#cross_val_score(regressor, X, y, cv=10)\n\n# Split the data\nx_train, x_test, y_train, y_test = train_test_split(X_tree, y_tree, test_size=0.2, random_state=42)\n#x_train= x_train.reshape(-1, 2)\n#x_test = x_test.reshape(-1, 2)\n\nregressor.fit(x_train, y_train)","kernel":"ds_env","output":{"0":{"data":{"text/html":"<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeRegressor(random_state=0)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" checked><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeRegressor</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeRegressor(random_state=0)</pre></div></div></div></div></div>","text/plain":"DecisionTreeRegressor(random_state=0)"},"exec_count":66}},"pos":52.5,"start":1655318520057,"state":"done","type":"cell"}
{"end":1655318548817,"exec_count":67,"id":"6ecfdf","input":"Price = regressor.predict(x_test)","kernel":"ds_env","pos":52.5234375,"start":1655318548804,"state":"done","type":"cell"}
{"end":1655318553448,"exec_count":68,"id":"449550","input":"MEA= np.mean(abs(y_test - Price))\nMEA","kernel":"ds_env","output":{"0":{"data":{"text/plain":"121249.02729585936"},"exec_count":68}},"pos":52.546875,"start":1655318553442,"state":"done","type":"cell"}
{"end":1655318568194,"exec_count":69,"id":"5969a6","input":"r2_score(y_test,Price)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"0.6249917759039725"},"exec_count":69}},"pos":52.5546875,"start":1655318568158,"state":"done","type":"cell"}
{"end":1655318573554,"exec_count":70,"id":"845bfe","input":"plt.scatter(y_test,Price, color=\"b\")\nplt.plot(y_test,y_test, color=\"r\")","kernel":"ds_env","output":{"0":{"data":{"text/plain":"[<matplotlib.lines.Line2D at 0x7f4e51a4d910>]"},"exec_count":70},"1":{"data":{"image/png":"83a667f84ab520accf4f51f89b718d4c35b4bed3","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":52.5625,"start":1655318573102,"state":"done","type":"cell"}
{"end":1655318583362,"exec_count":72,"id":"cf575b","input":"plt.figure(figsize = (8, 4), dpi = 100)\nsns.distplot(merged_zip['price'])\nplt.show()","kernel":"ds_env","output":{"0":{"name":"stderr","text":"/projects/a97d6307-9b0d-408a-ae28-2611511d3a18/miniconda3/envs/ds_env/lib/python3.8/site-packages/seaborn/distributions.py:2619: FutureWarning:\n\n`distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n\n"},"1":{"data":{"image/png":"6b34c04ff780dae6cba7ddb2745f1a3e919827f6","text/plain":"<Figure size 800x400 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":52.6875,"start":1655318582778,"state":"done","type":"cell"}
{"end":1655319638860,"exec_count":95,"id":"113fd2","input":"from sklearn.model_selection import train_test_split\nX_train, X_val_and_test, Y_train, Y_val_and_test = train_test_split(X_scale, Y, test_size=0.3)","kernel":"ds_env","output":{"0":{"ename":"NameError","evalue":"name 'X_scale' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Input \u001b[0;32mIn [95]\u001b[0m, in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01msklearn\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mmodel_selection\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m train_test_split\n\u001b[0;32m----> 2\u001b[0m X_train, X_val_and_test, Y_train, Y_val_and_test \u001b[38;5;241m=\u001b[39m train_test_split(\u001b[43mX_scale\u001b[49m, Y, test_size\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0.3\u001b[39m)\n","\u001b[0;31mNameError\u001b[0m: name 'X_scale' is not defined"]}},"pos":61.5,"start":1655319638836,"state":"done","type":"cell"}
{"end":1655320045723,"exec_count":103,"id":"fa5b4a","input":"from sklearn.preprocessing import PolynomialFeatures\n\npoly_reg=PolynomialFeatures(degree=2)\n\nG_poly=poly_reg.fit_transform(G_train)\n\nG_test_poly = poly_reg.transform(G_test)\n\nlin_reg2=LinearRegression()\nlin_reg2.fit(G_poly,E_train)","kernel":"ds_env","output":{"0":{"data":{"text/html":"<style>#sk-container-id-11 {color: black;background-color: white;}#sk-container-id-11 pre{padding: 0;}#sk-container-id-11 div.sk-toggleable {background-color: white;}#sk-container-id-11 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-11 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-11 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-11 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-11 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-11 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-11 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-11 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-11 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-11 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-11 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-11 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-11 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-11 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-11 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-11 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-11 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-11 div.sk-item {position: relative;z-index: 1;}#sk-container-id-11 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-11 div.sk-item::before, #sk-container-id-11 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-11 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-11 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-11 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-11 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-11 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-11 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-11 div.sk-label-container {text-align: center;}#sk-container-id-11 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-11 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-11\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-13\" type=\"checkbox\" checked><label for=\"sk-estimator-id-13\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>","text/plain":"LinearRegression()"},"exec_count":103}},"pos":46.5,"start":1655320045528,"state":"done","type":"cell"}
{"end":1655320046252,"exec_count":104,"id":"05b99c","input":"y_hat2 = lin_reg2.predict(G_test_poly)","kernel":"ds_env","pos":46.625,"start":1655320046249,"state":"done","type":"cell"}
{"end":1655320046937,"exec_count":105,"id":"af9749","input":"print(lin_reg2.score(G_test_poly, E_test))","kernel":"ds_env","output":{"0":{"name":"stdout","text":"0.7339775389306663\n"}},"pos":46.75,"start":1655320046925,"state":"done","type":"cell"}
{"end":1655320049463,"exec_count":106,"id":"cf2d77","input":"MAE2 = np.mean(abs(E_test - y_hat2))\nMAE2","kernel":"ds_env","output":{"0":{"data":{"text/plain":"123223.983696801"},"exec_count":106}},"pos":46.875,"start":1655320049448,"state":"done","type":"cell"}
{"end":1655320138721,"exec_count":108,"id":"d226a6","input":"from sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.pipeline import make_pipeline\n\npipe = make_pipeline(PolynomialFeatures(),LinearRegression())\n\nparams = {'polynomialfeatures__degree':[1,2,3]}\n\n\n#pipe.fit(G_train, E_train)\n\nsearch = GridSearchCV(estimator = pipe, param_grid = params, scoring = \"neg_mean_squared_error\")\n\nsearch.fit(G_train, E_train)\n\nprint(search.best_params_)\nprint(search.best_score_)\n","kernel":"ds_env","output":{"0":{"name":"stdout","text":"{'polynomialfeatures__degree': 2}\n-38973525210.767715\n"}},"pos":46.9375,"scrolled":true,"start":1655320130310,"state":"done","type":"cell"}
{"end":1655320219820,"exec_count":109,"id":"db8bc8","input":"update_data = merged_zip[merged_zip['price'] < 2e6] \nsns.distplot(update_data['price'])\nplt.show()","kernel":"ds_env","output":{"0":{"name":"stderr","text":"/projects/a97d6307-9b0d-408a-ae28-2611511d3a18/miniconda3/envs/ds_env/lib/python3.8/site-packages/seaborn/distributions.py:2619: FutureWarning:\n\n`distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n\n"},"1":{"data":{"image/png":"3d8c438692cf95baadfb400178482c8ede350524","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":52.84375,"start":1655320219467,"state":"done","type":"cell"}
{"end":1655320225978,"exec_count":110,"id":"48f17d","input":"from sklearn.model_selection import cross_val_score\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import r2_score\n\nX_tree = update_data.drop([\"price\"], axis = 1)\ny_tree = update_data[\"price\"]\n\n\nregressor = DecisionTreeRegressor(random_state=0)\n#cross_val_score(regressor, X, y, cv=10)\n\n# Split the data\nx_train, x_test, y_train, y_test = train_test_split(X_tree, y_tree, test_size=0.2, random_state=42)\n#x_train= x_train.reshape(-1, 2)\n#x_test = x_test.reshape(-1, 2)\n\nregressor.fit(x_train, y_train)","kernel":"ds_env","output":{"0":{"data":{"text/html":"<style>#sk-container-id-12 {color: black;background-color: white;}#sk-container-id-12 pre{padding: 0;}#sk-container-id-12 div.sk-toggleable {background-color: white;}#sk-container-id-12 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-12 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-12 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-12 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-12 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-12 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-12 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-12 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-12 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-12 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-12 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-12 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-12 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-12 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-12 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-12 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-12 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-12 div.sk-item {position: relative;z-index: 1;}#sk-container-id-12 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-12 div.sk-item::before, #sk-container-id-12 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-12 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-12 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-12 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-12 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-12 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-12 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-12 div.sk-label-container {text-align: center;}#sk-container-id-12 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-12 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-12\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeRegressor(random_state=0)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-14\" type=\"checkbox\" checked><label for=\"sk-estimator-id-14\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeRegressor</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeRegressor(random_state=0)</pre></div></div></div></div></div>","text/plain":"DecisionTreeRegressor(random_state=0)"},"exec_count":110}},"pos":52.921875,"start":1655320225660,"state":"done","type":"cell"}
{"end":1655320227225,"exec_count":111,"id":"7a98ed","input":"Price = regressor.predict(x_test)","kernel":"ds_env","pos":52.9609375,"start":1655320227207,"state":"done","type":"cell"}
{"end":1655320228454,"exec_count":112,"id":"374f40","input":"MEA= np.mean(abs(y_test - Price))\nMEA","kernel":"ds_env","output":{"0":{"data":{"text/plain":"109860.09761793555"},"exec_count":112}},"pos":52.98046875,"start":1655320228441,"state":"done","type":"cell"}
{"end":1655320229794,"exec_count":113,"id":"1ef967","input":"r2_score(y_test,Price)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"0.6654756535880301"},"exec_count":113}},"pos":52.990234375,"start":1655320229783,"state":"done","type":"cell"}
{"end":1655320264082,"exec_count":114,"id":"7dab4e","input":"plt.scatter(y_test,Price, color=\"b\")\nplt.plot(y_test,y_test, color=\"r\")","kernel":"ds_env","output":{"0":{"data":{"text/plain":"[<matplotlib.lines.Line2D at 0x7f4e6a17be50>]"},"exec_count":114},"1":{"data":{"image/png":"f2c7925b58e5e8a896c67414b382f89c02f90ffe","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":52.9951171875,"start":1655320263815,"state":"done","type":"cell"}
{"id":"4fd581","input":"df = pd.DataFrame(np.random.randn(100, 3))","kernel":"ds_env","pos":52.59375,"state":"done","type":"cell"}
{"id":0,"time":1655318117307,"type":"user"}
{"last_load":1655299476703,"type":"file"}