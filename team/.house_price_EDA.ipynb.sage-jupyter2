{"backend_state":"running","connection_file":"/projects/a97d6307-9b0d-408a-ae28-2611511d3a18/.local/share/jupyter/runtime/kernel-ec615b83-6284-49ab-ab14-75e76317b492.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","trust":true,"type":"settings"}
{"cell_type":"markdown","id":"0350b0","input":"### <span style='font-family:lucida sans'>Product Spec</span>\n\n","pos":0.5,"type":"cell"}
{"cell_type":"markdown","id":"27a3fc","input":"## <span style='font-family:lucida sans'>House Price Data EDA</span>\n\n","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"3abd27","input":"## Group of 3:\n\n##### Merging our Dataframe\n\nTo merge our dataframes we need to identify which columns we want to merge on. There's many ways to combine data, you can dive deeper here: <br>[https://realpython.com/pandas\\-merge\\-join\\-and\\-concat/](https://realpython.com/pandas-merge-join-and-concat/)<br> We will be focusing on a simple merge. <br><br> For a simple merge, we want to have two dataframes that have a column by the same name we want to merge on. <br>In our case we want to merge using the 'name' column. We will only have the data of schools that appear identically in both dataframes.<br> One thing to keep in mind, you must merge on a column with the same name so often will need to rename a column from one dataframe.\n\n","kernel":"ds_env","pos":2.4375,"type":"cell"}
{"cell_type":"markdown","id":"603f04","input":"Tech needed:\n\n- datasets on house prices including other specifications such as \\# of bedrooms, sq ft. of living space, location, etc\n- python to create models showing price vs \\# of bedrooms, price vs sq. ft of living space, etc.\n- A platform for machine learning\n- HTML in order to create the webpage\n\n","pos":0.9375,"type":"cell"}
{"cell_type":"markdown","id":"b3f621","input":"The Why:\n\nBeing able to predict house prices is important because there are a large variety of factors that contribute to the worth of a living area \\(bedroom number, square feet, etc.\\). This is helpful in the long run because people who are looking to buy a house can predict the price range, which allows them to plan their finances.\n\n","pos":0.875,"type":"cell"}
{"cell_type":"markdown","id":"c95c8b","input":"Product Outline: The product is a machine that can predict the cost of a house based on the number of rooms, floors, square feet, and other factors.\n\n","pos":0.5625,"type":"cell"}
{"cell_type":"markdown","id":"cc1e4f","input":"Potential Roadblocks:\n\n- If house prices for a certain location aren't provided\n- If there is a sudden rise in prices due to inflation\n- It wouldn't be able to predict a market crash\n\n","pos":0.96875,"type":"cell"}
{"cell_type":"markdown","id":"d15680","input":"Machine Learning Problem and Why \\(Identify which machine learning problem we are attempting to solve and why that's important\\):\n\n- problem: predict house prices based on factors of \\# of bathrooms, \\# of bedrooms, sq ft of living space, sq ft of lot, \\# of floors, waterfront, view, condition, sq ft of basement, year built, year renovated, zip code, etc\n- why this \"problem\" need to be solved: will help realators evaluate house price and will also help home buyers understand if they are paying more than they should be \n- supervised machine learning problem\n  - use examples from the data to predict outcome \\(estimated house price\\)\n- linear regression model\n  - simple linear regression: probably idea to use traditional slope intercept form to display data on a graph with equation y=mx\\+b\n  - line of best fit based on scatterplot data \n\n","pos":0.75,"type":"cell"}
{"cell_type":"markdown","id":"e9052d","input":"### Group of 2:\n\n","pos":2.0625,"type":"cell"}
{"cell_type":"markdown","id":"ea1dd2","input":"Minimum Viable Product: \n\nThe basic system should have a simple input for the user to write out how many rooms, square feet, and floors so the machine could predict how much a house will cost. \n\nIt should also include multiple graphs as proof to show the models reliability to the users. \n\n","pos":0.625,"type":"cell"}
{"end":1654869551393,"exec_count":1,"id":"4717c2","input":"import plotly.express as px\nimport plotly.graph_objects as go\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom plotly.offline import iplot","kernel":"ds_env","pos":1,"start":1654869550044,"state":"done","type":"cell"}
{"end":1654873181334,"exec_count":6,"id":"70bc75","input":"housePrice.shape","kernel":"ds_env","output":{"0":{"data":{"text/plain":"(21613, 21)"},"exec_count":6}},"pos":3,"start":1654873181313,"state":"done","type":"cell"}
{"end":1654876269945,"exec_count":18,"id":"df1a09","input":"fig = px.scatter(housePrice, x=\"sqft_living\", y=\"price\")\nfig.show()","kernel":"ds_env","output":{"0":{"data":{"iframe":"8bb0033484a6a028fa49a28a761ed3a012f57d66"}}},"pos":2.5,"start":1654876269575,"state":"done","type":"cell"}
{"end":1654876616055,"exec_count":21,"id":"d29f70","input":"housePrice.info()","kernel":"ds_env","output":{"0":{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 21613 entries, 0 to 21612\nData columns (total 21 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   id             21613 non-null  int64  \n 1   date           21613 non-null  object \n 2   price          21613 non-null  float64\n 3   bedrooms       21613 non-null  int64  \n 4   bathrooms      21613 non-null  float64\n 5   sqft_living    21613 non-null  int64  \n 6   sqft_lot       21613 non-null  int64  \n 7   floors         21613 non-null  float64\n 8   waterfront     21613 non-null  int64  \n 9   view           21613 non-null  int64  \n 10  condition      21613 non-null  int64  \n 11  grade          21613 non-null  int64  \n 12  sqft_above     21613 non-null  int64  \n 13  sqft_basement  21613 non-null  int64  \n 14  yr_built       21613 non-null  int64  \n 15  yr_renovated   21613 non-null  int64  \n 16  zipcode        21613 non-null  int64  \n 17  lat            21613 non-null  float64\n 18  long           21613 non-null  float64\n 19  sqft_living15  21613 non-null  int64  \n 20  sqft_lot15     21613 non-null  int64  \ndtypes: float64(5), int64(15), object(1)\nmemory usage: 3.5+ MB\n"}},"pos":2.375,"scrolled":true,"start":1654876616011,"state":"done","type":"cell"}
{"end":1654881403280,"exec_count":26,"id":"5e85cd","input":"fig1 = px.scatter(housePrice, x=\"price\", y=\"bedrooms\")\nfig1.show()","kernel":"ds_env","output":{"0":{"data":{"iframe":"bfc16baa06931cb9183553d94e4a940123e684d6"}}},"pos":2.75,"start":1654881403067,"state":"done","type":"cell"}
{"end":1654882183210,"exec_count":41,"id":"cb496e","input":"housePrice = pd.read_csv(\"Data/kc_house_data.csv\")\nzipcodedf = pd.read_csv(\"Data/usa_zipcode_of_wa.csv\")\nhousePrice.head()","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>date</th>\n      <th>price</th>\n      <th>bedrooms</th>\n      <th>bathrooms</th>\n      <th>sqft_living</th>\n      <th>sqft_lot</th>\n      <th>floors</th>\n      <th>waterfront</th>\n      <th>view</th>\n      <th>...</th>\n      <th>grade</th>\n      <th>sqft_above</th>\n      <th>sqft_basement</th>\n      <th>yr_built</th>\n      <th>yr_renovated</th>\n      <th>zipcode</th>\n      <th>lat</th>\n      <th>long</th>\n      <th>sqft_living15</th>\n      <th>sqft_lot15</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>7129300520</td>\n      <td>20141013T000000</td>\n      <td>221900.0</td>\n      <td>3</td>\n      <td>1.00</td>\n      <td>1180</td>\n      <td>5650</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>7</td>\n      <td>1180</td>\n      <td>0</td>\n      <td>1955</td>\n      <td>0</td>\n      <td>98178</td>\n      <td>47.5112</td>\n      <td>-122.257</td>\n      <td>1340</td>\n      <td>5650</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>6414100192</td>\n      <td>20141209T000000</td>\n      <td>538000.0</td>\n      <td>3</td>\n      <td>2.25</td>\n      <td>2570</td>\n      <td>7242</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>7</td>\n      <td>2170</td>\n      <td>400</td>\n      <td>1951</td>\n      <td>1991</td>\n      <td>98125</td>\n      <td>47.7210</td>\n      <td>-122.319</td>\n      <td>1690</td>\n      <td>7639</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>5631500400</td>\n      <td>20150225T000000</td>\n      <td>180000.0</td>\n      <td>2</td>\n      <td>1.00</td>\n      <td>770</td>\n      <td>10000</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>6</td>\n      <td>770</td>\n      <td>0</td>\n      <td>1933</td>\n      <td>0</td>\n      <td>98028</td>\n      <td>47.7379</td>\n      <td>-122.233</td>\n      <td>2720</td>\n      <td>8062</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2487200875</td>\n      <td>20141209T000000</td>\n      <td>604000.0</td>\n      <td>4</td>\n      <td>3.00</td>\n      <td>1960</td>\n      <td>5000</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>7</td>\n      <td>1050</td>\n      <td>910</td>\n      <td>1965</td>\n      <td>0</td>\n      <td>98136</td>\n      <td>47.5208</td>\n      <td>-122.393</td>\n      <td>1360</td>\n      <td>5000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1954400510</td>\n      <td>20150218T000000</td>\n      <td>510000.0</td>\n      <td>3</td>\n      <td>2.00</td>\n      <td>1680</td>\n      <td>8080</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>8</td>\n      <td>1680</td>\n      <td>0</td>\n      <td>1987</td>\n      <td>0</td>\n      <td>98074</td>\n      <td>47.6168</td>\n      <td>-122.045</td>\n      <td>1800</td>\n      <td>7503</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 21 columns</p>\n</div>","text/plain":"           id             date     price  bedrooms  bathrooms  sqft_living  \\\n0  7129300520  20141013T000000  221900.0         3       1.00         1180   \n1  6414100192  20141209T000000  538000.0         3       2.25         2570   \n2  5631500400  20150225T000000  180000.0         2       1.00          770   \n3  2487200875  20141209T000000  604000.0         4       3.00         1960   \n4  1954400510  20150218T000000  510000.0         3       2.00         1680   \n\n   sqft_lot  floors  waterfront  view  ...  grade  sqft_above  sqft_basement  \\\n0      5650     1.0           0     0  ...      7        1180              0   \n1      7242     2.0           0     0  ...      7        2170            400   \n2     10000     1.0           0     0  ...      6         770              0   \n3      5000     1.0           0     0  ...      7        1050            910   \n4      8080     1.0           0     0  ...      8        1680              0   \n\n   yr_built  yr_renovated  zipcode      lat     long  sqft_living15  \\\n0      1955             0    98178  47.5112 -122.257           1340   \n1      1951          1991    98125  47.7210 -122.319           1690   \n2      1933             0    98028  47.7379 -122.233           2720   \n3      1965             0    98136  47.5208 -122.393           1360   \n4      1987             0    98074  47.6168 -122.045           1800   \n\n   sqft_lot15  \n0        5650  \n1        7639  \n2        8062  \n3        5000  \n4        7503  \n\n[5 rows x 21 columns]"},"exec_count":41}},"pos":2,"scrolled":true,"start":1654882183114,"state":"done","type":"cell"}
{"end":1654882389814,"exec_count":57,"id":"b3a543","input":"zipcode = pd.read_csv(\"Data/usa_zipcode_of_wa.csv\")","kernel":"ds_env","pos":2.09375,"start":1654882389800,"state":"done","type":"cell"}
{"end":1654882436200,"exec_count":61,"id":"37abab","input":"zipcode.isnull().sum()","kernel":"ds_env","output":{"0":{"data":{"text/plain":"zip             0\nZipcode name    0\nCity            0\nState           0\nCounty Name     0\ndtype: int64"},"exec_count":61}},"pos":2.1875,"scrolled":false,"start":1654882436186,"state":"done","type":"cell"}
{"end":1654882441582,"exec_count":62,"id":"c851b5","input":"zipcode = zipcode.dropna(subset=['zip', 'Zipcode name','City','State' ,'County Name'])\nzipcode.isnull().sum()","kernel":"ds_env","output":{"0":{"data":{"text/plain":"zip             0\nZipcode name    0\nCity            0\nState           0\nCounty Name     0\ndtype: int64"},"exec_count":62}},"pos":2.21875,"scrolled":true,"start":1654882441569,"state":"done","type":"cell"}
{"end":1654882455940,"exec_count":63,"id":"1e6d62","input":"zipcode.tail()","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>zip</th>\n      <th>Zipcode name</th>\n      <th>City</th>\n      <th>State</th>\n      <th>County Name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>688</th>\n      <td>98907</td>\n      <td>YAKIMA, WA</td>\n      <td>YAKIMA</td>\n      <td>WA</td>\n      <td>YAKIMA</td>\n    </tr>\n    <tr>\n      <th>689</th>\n      <td>98908</td>\n      <td>YAKIMA, WA</td>\n      <td>YAKIMA</td>\n      <td>WA</td>\n      <td>YAKIMA</td>\n    </tr>\n    <tr>\n      <th>690</th>\n      <td>98909</td>\n      <td>YAKIMA, WA</td>\n      <td>YAKIMA</td>\n      <td>WA</td>\n      <td>YAKIMA</td>\n    </tr>\n    <tr>\n      <th>691</th>\n      <td>98597</td>\n      <td>YELM, WA</td>\n      <td>YELM</td>\n      <td>WA</td>\n      <td>THURSTON</td>\n    </tr>\n    <tr>\n      <th>692</th>\n      <td>98953</td>\n      <td>ZILLAH, WA</td>\n      <td>ZILLAH</td>\n      <td>WA</td>\n      <td>YAKIMA</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"       zip Zipcode name    City State County Name\n688  98907   YAKIMA, WA  YAKIMA    WA      YAKIMA\n689  98908   YAKIMA, WA  YAKIMA    WA      YAKIMA\n690  98909   YAKIMA, WA  YAKIMA    WA      YAKIMA\n691  98597     YELM, WA    YELM    WA    THURSTON\n692  98953   ZILLAH, WA  ZILLAH    WA      YAKIMA"},"exec_count":63}},"pos":2.234375,"start":1654882455912,"state":"done","type":"cell"}
{"end":1654882696211,"exec_count":69,"id":"c5cda6","input":"# ex\nzipcode = zipcode.rename(columns = {'zip':'zipcode'})","kernel":"ds_env","pos":2.236328125,"start":1654882696184,"state":"done","type":"cell"}
{"end":1654882711833,"exec_count":70,"id":"dc2ac0","input":"zipcode.head()","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>zipcode</th>\n      <th>Zipcode name</th>\n      <th>City</th>\n      <th>State</th>\n      <th>County Name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>98520</td>\n      <td>ABERDEEN, WA</td>\n      <td>ABERDEEN</td>\n      <td>WA</td>\n      <td>GRAYS HARBOR</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>98220</td>\n      <td>ACME, WA</td>\n      <td>ACME</td>\n      <td>WA</td>\n      <td>WHATCOM</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>99101</td>\n      <td>ADDY, WA</td>\n      <td>ADDY</td>\n      <td>WA</td>\n      <td>STEVENS</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>98522</td>\n      <td>ADNA, WA</td>\n      <td>ADNA</td>\n      <td>WA</td>\n      <td>LEWIS</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>99001</td>\n      <td>AIRWAY HEIGHTS, WA</td>\n      <td>AIRWAY HEIGHTS</td>\n      <td>WA</td>\n      <td>SPOKANE</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"  zipcode        Zipcode name            City State   County Name\n0   98520        ABERDEEN, WA        ABERDEEN    WA  GRAYS HARBOR\n1   98220            ACME, WA            ACME    WA       WHATCOM\n2   99101            ADDY, WA            ADDY    WA       STEVENS\n3   98522            ADNA, WA            ADNA    WA         LEWIS\n4   99001  AIRWAY HEIGHTS, WA  AIRWAY HEIGHTS    WA       SPOKANE"},"exec_count":70}},"pos":2.125,"start":1654882711810,"state":"done","type":"cell"}
{"end":1654882879491,"exec_count":76,"id":"fb0802","input":"zipcode['zipcode'] = zipcode['zipcode'].astype(int)\nzipcode['zipcode']","kernel":"ds_env","output":{"0":{"data":{"text/plain":"0      98520\n1      98220\n2      99101\n3      98522\n4      99001\n       ...  \n688    98907\n689    98908\n690    98909\n691    98597\n692    98953\nName: zipcode, Length: 693, dtype: int64"},"exec_count":76}},"pos":2.23828125,"scrolled":true,"start":1654882879478,"state":"done","type":"cell"}
{"end":1654882914409,"exec_count":78,"id":"5a0807","input":"merged_df = pd.merge(housePrice, zipcode, on='zipcode')","kernel":"ds_env","pos":2.2421875,"scrolled":true,"start":1654882914388,"state":"done","type":"cell"}
{"end":1654882936722,"exec_count":79,"id":"15634e","input":"housePrice.tail()","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>date</th>\n      <th>price</th>\n      <th>bedrooms</th>\n      <th>bathrooms</th>\n      <th>sqft_living</th>\n      <th>sqft_lot</th>\n      <th>floors</th>\n      <th>waterfront</th>\n      <th>view</th>\n      <th>...</th>\n      <th>grade</th>\n      <th>sqft_above</th>\n      <th>sqft_basement</th>\n      <th>yr_built</th>\n      <th>yr_renovated</th>\n      <th>zipcode</th>\n      <th>lat</th>\n      <th>long</th>\n      <th>sqft_living15</th>\n      <th>sqft_lot15</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>21608</th>\n      <td>263000018</td>\n      <td>20140521T000000</td>\n      <td>360000.0</td>\n      <td>3</td>\n      <td>2.50</td>\n      <td>1530</td>\n      <td>1131</td>\n      <td>3.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>8</td>\n      <td>1530</td>\n      <td>0</td>\n      <td>2009</td>\n      <td>0</td>\n      <td>98103</td>\n      <td>47.6993</td>\n      <td>-122.346</td>\n      <td>1530</td>\n      <td>1509</td>\n    </tr>\n    <tr>\n      <th>21609</th>\n      <td>6600060120</td>\n      <td>20150223T000000</td>\n      <td>400000.0</td>\n      <td>4</td>\n      <td>2.50</td>\n      <td>2310</td>\n      <td>5813</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>8</td>\n      <td>2310</td>\n      <td>0</td>\n      <td>2014</td>\n      <td>0</td>\n      <td>98146</td>\n      <td>47.5107</td>\n      <td>-122.362</td>\n      <td>1830</td>\n      <td>7200</td>\n    </tr>\n    <tr>\n      <th>21610</th>\n      <td>1523300141</td>\n      <td>20140623T000000</td>\n      <td>402101.0</td>\n      <td>2</td>\n      <td>0.75</td>\n      <td>1020</td>\n      <td>1350</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>7</td>\n      <td>1020</td>\n      <td>0</td>\n      <td>2009</td>\n      <td>0</td>\n      <td>98144</td>\n      <td>47.5944</td>\n      <td>-122.299</td>\n      <td>1020</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>21611</th>\n      <td>291310100</td>\n      <td>20150116T000000</td>\n      <td>400000.0</td>\n      <td>3</td>\n      <td>2.50</td>\n      <td>1600</td>\n      <td>2388</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>8</td>\n      <td>1600</td>\n      <td>0</td>\n      <td>2004</td>\n      <td>0</td>\n      <td>98027</td>\n      <td>47.5345</td>\n      <td>-122.069</td>\n      <td>1410</td>\n      <td>1287</td>\n    </tr>\n    <tr>\n      <th>21612</th>\n      <td>1523300157</td>\n      <td>20141015T000000</td>\n      <td>325000.0</td>\n      <td>2</td>\n      <td>0.75</td>\n      <td>1020</td>\n      <td>1076</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>7</td>\n      <td>1020</td>\n      <td>0</td>\n      <td>2008</td>\n      <td>0</td>\n      <td>98144</td>\n      <td>47.5941</td>\n      <td>-122.299</td>\n      <td>1020</td>\n      <td>1357</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 21 columns</p>\n</div>","text/plain":"               id             date     price  bedrooms  bathrooms  \\\n21608   263000018  20140521T000000  360000.0         3       2.50   \n21609  6600060120  20150223T000000  400000.0         4       2.50   \n21610  1523300141  20140623T000000  402101.0         2       0.75   \n21611   291310100  20150116T000000  400000.0         3       2.50   \n21612  1523300157  20141015T000000  325000.0         2       0.75   \n\n       sqft_living  sqft_lot  floors  waterfront  view  ...  grade  \\\n21608         1530      1131     3.0           0     0  ...      8   \n21609         2310      5813     2.0           0     0  ...      8   \n21610         1020      1350     2.0           0     0  ...      7   \n21611         1600      2388     2.0           0     0  ...      8   \n21612         1020      1076     2.0           0     0  ...      7   \n\n       sqft_above  sqft_basement  yr_built  yr_renovated  zipcode      lat  \\\n21608        1530              0      2009             0    98103  47.6993   \n21609        2310              0      2014             0    98146  47.5107   \n21610        1020              0      2009             0    98144  47.5944   \n21611        1600              0      2004             0    98027  47.5345   \n21612        1020              0      2008             0    98144  47.5941   \n\n          long  sqft_living15  sqft_lot15  \n21608 -122.346           1530        1509  \n21609 -122.362           1830        7200  \n21610 -122.299           1020        2007  \n21611 -122.069           1410        1287  \n21612 -122.299           1020        1357  \n\n[5 rows x 21 columns]"},"exec_count":79}},"pos":2.25,"scrolled":true,"start":1654882936693,"state":"done","type":"cell"}
{"end":1654883330327,"exec_count":87,"id":"729fda","input":"zipcodedf = zipcodedf.rename(columns={\"zip\": \"zipcode\"})\nzipcodedf.head()","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>zipcode</th>\n      <th>Zipcode name</th>\n      <th>City</th>\n      <th>State</th>\n      <th>County Name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>98520</td>\n      <td>ABERDEEN, WA</td>\n      <td>ABERDEEN</td>\n      <td>WA</td>\n      <td>GRAYS HARBOR</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>98220</td>\n      <td>ACME, WA</td>\n      <td>ACME</td>\n      <td>WA</td>\n      <td>WHATCOM</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>99101</td>\n      <td>ADDY, WA</td>\n      <td>ADDY</td>\n      <td>WA</td>\n      <td>STEVENS</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>98522</td>\n      <td>ADNA, WA</td>\n      <td>ADNA</td>\n      <td>WA</td>\n      <td>LEWIS</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>99001</td>\n      <td>AIRWAY HEIGHTS, WA</td>\n      <td>AIRWAY HEIGHTS</td>\n      <td>WA</td>\n      <td>SPOKANE</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"  zipcode        Zipcode name            City State   County Name\n0   98520        ABERDEEN, WA        ABERDEEN    WA  GRAYS HARBOR\n1   98220            ACME, WA            ACME    WA       WHATCOM\n2   99101            ADDY, WA            ADDY    WA       STEVENS\n3   98522            ADNA, WA            ADNA    WA         LEWIS\n4   99001  AIRWAY HEIGHTS, WA  AIRWAY HEIGHTS    WA       SPOKANE"},"exec_count":87}},"pos":2.875,"scrolled":true,"start":1654883330312,"state":"done","type":"cell"}
{"end":1654883334713,"exec_count":88,"id":"0ebed5","input":"zipcodedf = zipcodedf.dropna(subset=['City'])\nzipcodedf.tail()","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>zipcode</th>\n      <th>Zipcode name</th>\n      <th>City</th>\n      <th>State</th>\n      <th>County Name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>688</th>\n      <td>98907</td>\n      <td>YAKIMA, WA</td>\n      <td>YAKIMA</td>\n      <td>WA</td>\n      <td>YAKIMA</td>\n    </tr>\n    <tr>\n      <th>689</th>\n      <td>98908</td>\n      <td>YAKIMA, WA</td>\n      <td>YAKIMA</td>\n      <td>WA</td>\n      <td>YAKIMA</td>\n    </tr>\n    <tr>\n      <th>690</th>\n      <td>98909</td>\n      <td>YAKIMA, WA</td>\n      <td>YAKIMA</td>\n      <td>WA</td>\n      <td>YAKIMA</td>\n    </tr>\n    <tr>\n      <th>691</th>\n      <td>98597</td>\n      <td>YELM, WA</td>\n      <td>YELM</td>\n      <td>WA</td>\n      <td>THURSTON</td>\n    </tr>\n    <tr>\n      <th>692</th>\n      <td>98953</td>\n      <td>ZILLAH, WA</td>\n      <td>ZILLAH</td>\n      <td>WA</td>\n      <td>YAKIMA</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"    zipcode Zipcode name    City State County Name\n688   98907   YAKIMA, WA  YAKIMA    WA      YAKIMA\n689   98908   YAKIMA, WA  YAKIMA    WA      YAKIMA\n690   98909   YAKIMA, WA  YAKIMA    WA      YAKIMA\n691   98597     YELM, WA    YELM    WA    THURSTON\n692   98953   ZILLAH, WA  ZILLAH    WA      YAKIMA"},"exec_count":88}},"pos":2.890625,"start":1654883334699,"state":"done","type":"cell"}
{"end":1654883419103,"exec_count":95,"id":"c8fd0f","input":"fig = px.box(housePrice, x='zipcode', y='price')\nfig.show()","kernel":"ds_env","output":{"0":{"data":{"iframe":"91a10ca2f80f690fe640ef2d2c0c2616bcfc3197"}}},"pos":2.3125,"scrolled":true,"start":1654883418855,"state":"done","type":"cell"}
{"end":1654883429189,"exec_count":96,"id":"1a45b0","input":"zipcodedf['zipcode'] = zipcodedf['zipcode'].astype(int)","kernel":"ds_env","pos":2.8984375,"start":1654883429153,"state":"done","type":"cell"}
{"end":1654883432362,"exec_count":97,"id":"4af51d","input":"merged_zip = pd.merge(zipcodedf, housePrice, on =\"zipcode\")","kernel":"ds_env","pos":2.90625,"start":1654883432339,"state":"done","type":"cell"}
{"end":1654883448212,"exec_count":98,"id":"cd12ce","input":"merged_zip.head()","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>zipcode</th>\n      <th>Zipcode name</th>\n      <th>City</th>\n      <th>State</th>\n      <th>County Name</th>\n      <th>id</th>\n      <th>date</th>\n      <th>price</th>\n      <th>bedrooms</th>\n      <th>bathrooms</th>\n      <th>...</th>\n      <th>condition</th>\n      <th>grade</th>\n      <th>sqft_above</th>\n      <th>sqft_basement</th>\n      <th>yr_built</th>\n      <th>yr_renovated</th>\n      <th>lat</th>\n      <th>long</th>\n      <th>sqft_living15</th>\n      <th>sqft_lot15</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>98001</td>\n      <td>AUBURN, WA</td>\n      <td>AUBURN</td>\n      <td>WA</td>\n      <td>KING</td>\n      <td>7895500070</td>\n      <td>20150213T000000</td>\n      <td>240000.0</td>\n      <td>4</td>\n      <td>1.0</td>\n      <td>...</td>\n      <td>2</td>\n      <td>7</td>\n      <td>890</td>\n      <td>330</td>\n      <td>1969</td>\n      <td>0</td>\n      <td>47.3341</td>\n      <td>-122.282</td>\n      <td>1290</td>\n      <td>7800</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>98001</td>\n      <td>AUBURN, WA</td>\n      <td>AUBURN</td>\n      <td>WA</td>\n      <td>KING</td>\n      <td>3717000160</td>\n      <td>20141009T000000</td>\n      <td>287000.0</td>\n      <td>4</td>\n      <td>2.5</td>\n      <td>...</td>\n      <td>3</td>\n      <td>7</td>\n      <td>2240</td>\n      <td>0</td>\n      <td>2005</td>\n      <td>0</td>\n      <td>47.3378</td>\n      <td>-122.257</td>\n      <td>2221</td>\n      <td>4557</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>98001</td>\n      <td>AUBURN, WA</td>\n      <td>AUBURN</td>\n      <td>WA</td>\n      <td>KING</td>\n      <td>8961960160</td>\n      <td>20141028T000000</td>\n      <td>480000.0</td>\n      <td>4</td>\n      <td>2.5</td>\n      <td>...</td>\n      <td>3</td>\n      <td>9</td>\n      <td>2520</td>\n      <td>710</td>\n      <td>2001</td>\n      <td>0</td>\n      <td>47.3183</td>\n      <td>-122.253</td>\n      <td>2640</td>\n      <td>8517</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>98001</td>\n      <td>AUBURN, WA</td>\n      <td>AUBURN</td>\n      <td>WA</td>\n      <td>KING</td>\n      <td>4014400292</td>\n      <td>20150114T000000</td>\n      <td>465000.0</td>\n      <td>3</td>\n      <td>2.5</td>\n      <td>...</td>\n      <td>3</td>\n      <td>9</td>\n      <td>2714</td>\n      <td>0</td>\n      <td>2005</td>\n      <td>0</td>\n      <td>47.3185</td>\n      <td>-122.275</td>\n      <td>2590</td>\n      <td>18386</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>98001</td>\n      <td>AUBURN, WA</td>\n      <td>AUBURN</td>\n      <td>WA</td>\n      <td>KING</td>\n      <td>1115450240</td>\n      <td>20141022T000000</td>\n      <td>360000.0</td>\n      <td>4</td>\n      <td>2.5</td>\n      <td>...</td>\n      <td>3</td>\n      <td>9</td>\n      <td>2160</td>\n      <td>0</td>\n      <td>1992</td>\n      <td>0</td>\n      <td>47.3341</td>\n      <td>-122.255</td>\n      <td>2280</td>\n      <td>9937</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 25 columns</p>\n</div>","text/plain":"   zipcode Zipcode name    City State County Name          id  \\\n0    98001   AUBURN, WA  AUBURN    WA        KING  7895500070   \n1    98001   AUBURN, WA  AUBURN    WA        KING  3717000160   \n2    98001   AUBURN, WA  AUBURN    WA        KING  8961960160   \n3    98001   AUBURN, WA  AUBURN    WA        KING  4014400292   \n4    98001   AUBURN, WA  AUBURN    WA        KING  1115450240   \n\n              date     price  bedrooms  bathrooms  ...  condition  grade  \\\n0  20150213T000000  240000.0         4        1.0  ...          2      7   \n1  20141009T000000  287000.0         4        2.5  ...          3      7   \n2  20141028T000000  480000.0         4        2.5  ...          3      9   \n3  20150114T000000  465000.0         3        2.5  ...          3      9   \n4  20141022T000000  360000.0         4        2.5  ...          3      9   \n\n   sqft_above  sqft_basement  yr_built  yr_renovated      lat     long  \\\n0         890            330      1969             0  47.3341 -122.282   \n1        2240              0      2005             0  47.3378 -122.257   \n2        2520            710      2001             0  47.3183 -122.253   \n3        2714              0      2005             0  47.3185 -122.275   \n4        2160              0      1992             0  47.3341 -122.255   \n\n   sqft_living15  sqft_lot15  \n0           1290        7800  \n1           2221        4557  \n2           2640        8517  \n3           2590       18386  \n4           2280        9937  \n\n[5 rows x 25 columns]"},"exec_count":98}},"pos":2.9375,"scrolled":true,"start":1654883448176,"state":"done","type":"cell"}
{"end":1654883619845,"exec_count":100,"id":"7f3d0c","input":"boxplot = px.box(merged_zip, x=\"City\", y=\"price\")\nboxplot.show()","kernel":"ds_env","output":{"0":{"data":{"iframe":"57bb5ebc027df518fd88428d535fbbd632f3ef1e"}}},"pos":4,"scrolled":true,"start":1654883619430,"state":"done","type":"cell"}
{"id":"609804","input":"","pos":2.625,"type":"cell"}
{"id":"a62ca6","input":"","pos":2.359375,"type":"cell"}
{"id":"a81c28","input":"","pos":6,"type":"cell"}
{"id":"e3fed6","input":"","pos":2.34375,"type":"cell"}
{"id":0,"time":1654884392581,"type":"user"}
{"last_load":1654869525352,"type":"file"}